Directory structure:
└── 0xedev-buster-mkt/
    ├── README.md
    ├── components.json
    ├── next.config.ts
    ├── package.json
    ├── postcss.config.mjs
    ├── tailwind.config.ts
    ├── tsconfig.json
    ├── upgrades.md
    ├── .eslintrc.json
    ├── public/
    │   ├── banner2.avif
    │   ├── fonts/
    │   │   └── Inter/
    │   │       ├── Inter-Italic-VariableFont_opsz,wght.ttf
    │   │       ├── Inter-VariableFont_opsz,wght.ttf
    │   │       ├── OFL.txt
    │   │       ├── README.txt
    │   │       └── static/
    │   │           ├── Inter_18pt-Black.ttf
    │   │           ├── Inter_18pt-BlackItalic.ttf
    │   │           ├── Inter_18pt-Bold.ttf
    │   │           ├── Inter_18pt-BoldItalic.ttf
    │   │           ├── Inter_18pt-ExtraBold.ttf
    │   │           ├── Inter_18pt-ExtraBoldItalic.ttf
    │   │           ├── Inter_18pt-ExtraLight.ttf
    │   │           ├── Inter_18pt-ExtraLightItalic.ttf
    │   │           ├── Inter_18pt-Italic.ttf
    │   │           ├── Inter_18pt-Light.ttf
    │   │           ├── Inter_18pt-LightItalic.ttf
    │   │           ├── Inter_18pt-Medium.ttf
    │   │           ├── Inter_18pt-MediumItalic.ttf
    │   │           ├── Inter_18pt-Regular.ttf
    │   │           ├── Inter_18pt-SemiBold.ttf
    │   │           ├── Inter_18pt-SemiBoldItalic.ttf
    │   │           ├── Inter_18pt-Thin.ttf
    │   │           ├── Inter_18pt-ThinItalic.ttf
    │   │           ├── Inter_24pt-Black.ttf
    │   │           ├── Inter_24pt-BlackItalic.ttf
    │   │           ├── Inter_24pt-Bold.ttf
    │   │           ├── Inter_24pt-BoldItalic.ttf
    │   │           ├── Inter_24pt-ExtraBold.ttf
    │   │           ├── Inter_24pt-ExtraBoldItalic.ttf
    │   │           ├── Inter_24pt-ExtraLight.ttf
    │   │           ├── Inter_24pt-ExtraLightItalic.ttf
    │   │           ├── Inter_24pt-Italic.ttf
    │   │           ├── Inter_24pt-Light.ttf
    │   │           ├── Inter_24pt-LightItalic.ttf
    │   │           ├── Inter_24pt-Medium.ttf
    │   │           ├── Inter_24pt-MediumItalic.ttf
    │   │           ├── Inter_24pt-Regular.ttf
    │   │           ├── Inter_24pt-SemiBold.ttf
    │   │           ├── Inter_24pt-SemiBoldItalic.ttf
    │   │           ├── Inter_24pt-Thin.ttf
    │   │           ├── Inter_24pt-ThinItalic.ttf
    │   │           ├── Inter_28pt-Black.ttf
    │   │           ├── Inter_28pt-BlackItalic.ttf
    │   │           ├── Inter_28pt-Bold.ttf
    │   │           ├── Inter_28pt-BoldItalic.ttf
    │   │           ├── Inter_28pt-ExtraBold.ttf
    │   │           ├── Inter_28pt-ExtraBoldItalic.ttf
    │   │           ├── Inter_28pt-ExtraLight.ttf
    │   │           ├── Inter_28pt-ExtraLightItalic.ttf
    │   │           ├── Inter_28pt-Italic.ttf
    │   │           ├── Inter_28pt-Light.ttf
    │   │           ├── Inter_28pt-LightItalic.ttf
    │   │           ├── Inter_28pt-Medium.ttf
    │   │           ├── Inter_28pt-MediumItalic.ttf
    │   │           ├── Inter_28pt-Regular.ttf
    │   │           ├── Inter_28pt-SemiBold.ttf
    │   │           ├── Inter_28pt-SemiBoldItalic.ttf
    │   │           ├── Inter_28pt-Thin.ttf
    │   │           └── Inter_28pt-ThinItalic.ttf
    │   └── .well-known/
    │       └── farcaster.json
    └── src/
        ├── app/
        │   ├── client.ts
        │   ├── globals.css
        │   ├── layout.tsx
        │   ├── page.tsx
        │   ├── api/
        │   │   ├── frame-action/
        │   │   │   └── route.tsx
        │   │   ├── leaderboard/
        │   │   │   └── route.ts
        │   │   ├── market-image/
        │   │   │   └── route.tsx
        │   │   └── webhook/
        │   │       └── route.ts
        │   ├── fonts/
        │   │   ├── GeistMonoVF.woff
        │   │   └── GeistVF.woff
        │   └── market/
        │       └── [marketId]/
        │           └── page.tsx
        ├── components/
        │   ├── ClaimTokensButton.tsx
        │   ├── enhanced-prediction-market-dashboard.tsx
        │   ├── footer.tsx
        │   ├── market-buy-interface.tsx
        │   ├── market-card-skeleton.tsx
        │   ├── market-pending.tsx
        │   ├── market-progress.tsx
        │   ├── market-resolved.tsx
        │   ├── market-shares-display.tsx
        │   ├── market-time.tsx
        │   ├── marketCard.tsx
        │   ├── MarketList.tsx
        │   ├── MiniAppClient.tsx
        │   ├── navbar.tsx
        │   ├── OnboardingModal.tsx
        │   ├── upgrades.md
        │   ├── VoteHistory.tsx
        │   └── ui/
        │       ├── badge.tsx
        │       ├── button.tsx
        │       ├── card.tsx
        │       ├── dialog.tsx
        │       ├── input.tsx
        │       ├── label.tsx
        │       ├── progress.tsx
        │       ├── sonner.tsx
        │       ├── tabs.tsx
        │       ├── toast.tsx
        │       ├── toaster.tsx
        │       └── use-toast.ts
        ├── constants/
        │   ├── contract.ts
        │   └── token.ts
        ├── hooks/
        │   ├── use-toast.ts
        │   └── useFarcasterUser.ts
        ├── lib/
        │   └── utils.ts
        └── types/
            └── types.ts

================================================
FILE: README.md
================================================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}


================================================
FILE: next.config.ts
================================================
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
};

export default nextConfig;



================================================
FILE: package.json
================================================
{
  "name": "simplepredictionmarket",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@farcaster/auth-kit": "^0.6.0",
    "@farcaster/core": "^0.16.0",
    "@farcaster/frame-sdk": "^0.0.34",
    "@farcaster/frame-wagmi-connector": "^0.0.22",
    "@neynar/nodejs-sdk": "^2.26.1",
    "@radix-ui/react-dialog": "^1.1.11",
    "@radix-ui/react-label": "^2.1.4",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@vercel/og": "^0.6.8",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "ethers": "^6.13.5",
    "lodash": "^4.17.21",
    "lucide-react": "^0.453.0",
    "next": "15.0.1",
    "next-themes": "^0.4.6",
    "node-cache": "^5.1.2",
    "pino-pretty": "^13.0.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "sharp": "^0.34.1",
    "sonner": "^2.0.3",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "thirdweb": "^5.64.2",
    "viem": "^2.26.3",
    "wagmi": "^2.14.16"
  },
  "devDependencies": {
    "@types/lodash": "^4.17.16",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.1",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}



================================================
FILE: postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
FILE: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

const config: Config = {
    darkMode: ["class"],
    content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
  	extend: {
  		colors: {
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
};
export default config;



================================================
FILE: tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
FILE: upgrades.md
================================================



================================================
FILE: .eslintrc.json
================================================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}



================================================
FILE: public/banner2.avif
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/Inter-Italic-VariableFont_opsz,wght.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/Inter-VariableFont_opsz,wght.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/OFL.txt
================================================
Copyright 2020 The Inter Project Authors (https://github.com/rsms/inter)

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
https://openfontlicense.org


-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.



================================================
FILE: public/fonts/Inter/README.txt
================================================
Inter Variable Font
===================

This download contains Inter as both variable fonts and static fonts.

Inter is a variable font with these axes:
  opsz
  wght

This means all the styles are contained in these files:
  Inter-VariableFont_opsz,wght.ttf
  Inter-Italic-VariableFont_opsz,wght.ttf

If your app fully supports variable fonts, you can now pick intermediate styles
that aren’t available as static fonts. Not all apps support variable fonts, and
in those cases you can use the static font files for Inter:
  static/Inter_18pt-Thin.ttf
  static/Inter_18pt-ExtraLight.ttf
  static/Inter_18pt-Light.ttf
  static/Inter_18pt-Regular.ttf
  static/Inter_18pt-Medium.ttf
  static/Inter_18pt-SemiBold.ttf
  static/Inter_18pt-Bold.ttf
  static/Inter_18pt-ExtraBold.ttf
  static/Inter_18pt-Black.ttf
  static/Inter_24pt-Thin.ttf
  static/Inter_24pt-ExtraLight.ttf
  static/Inter_24pt-Light.ttf
  static/Inter_24pt-Regular.ttf
  static/Inter_24pt-Medium.ttf
  static/Inter_24pt-SemiBold.ttf
  static/Inter_24pt-Bold.ttf
  static/Inter_24pt-ExtraBold.ttf
  static/Inter_24pt-Black.ttf
  static/Inter_28pt-Thin.ttf
  static/Inter_28pt-ExtraLight.ttf
  static/Inter_28pt-Light.ttf
  static/Inter_28pt-Regular.ttf
  static/Inter_28pt-Medium.ttf
  static/Inter_28pt-SemiBold.ttf
  static/Inter_28pt-Bold.ttf
  static/Inter_28pt-ExtraBold.ttf
  static/Inter_28pt-Black.ttf
  static/Inter_18pt-ThinItalic.ttf
  static/Inter_18pt-ExtraLightItalic.ttf
  static/Inter_18pt-LightItalic.ttf
  static/Inter_18pt-Italic.ttf
  static/Inter_18pt-MediumItalic.ttf
  static/Inter_18pt-SemiBoldItalic.ttf
  static/Inter_18pt-BoldItalic.ttf
  static/Inter_18pt-ExtraBoldItalic.ttf
  static/Inter_18pt-BlackItalic.ttf
  static/Inter_24pt-ThinItalic.ttf
  static/Inter_24pt-ExtraLightItalic.ttf
  static/Inter_24pt-LightItalic.ttf
  static/Inter_24pt-Italic.ttf
  static/Inter_24pt-MediumItalic.ttf
  static/Inter_24pt-SemiBoldItalic.ttf
  static/Inter_24pt-BoldItalic.ttf
  static/Inter_24pt-ExtraBoldItalic.ttf
  static/Inter_24pt-BlackItalic.ttf
  static/Inter_28pt-ThinItalic.ttf
  static/Inter_28pt-ExtraLightItalic.ttf
  static/Inter_28pt-LightItalic.ttf
  static/Inter_28pt-Italic.ttf
  static/Inter_28pt-MediumItalic.ttf
  static/Inter_28pt-SemiBoldItalic.ttf
  static/Inter_28pt-BoldItalic.ttf
  static/Inter_28pt-ExtraBoldItalic.ttf
  static/Inter_28pt-BlackItalic.ttf

Get started
-----------

1. Install the font files you want to use

2. Use your app's font picker to view the font family and all the
available styles

Learn more about variable fonts
-------------------------------

  https://developers.google.com/web/fundamentals/design-and-ux/typography/variable-fonts
  https://variablefonts.typenetwork.com
  https://medium.com/variable-fonts

In desktop apps

  https://theblog.adobe.com/can-variable-fonts-illustrator-cc
  https://helpx.adobe.com/nz/photoshop/using/fonts.html#variable_fonts

Online

  https://developers.google.com/fonts/docs/getting_started
  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide
  https://developer.microsoft.com/en-us/microsoft-edge/testdrive/demos/variable-fonts

Installing fonts

  MacOS: https://support.apple.com/en-us/HT201749
  Linux: https://www.google.com/search?q=how+to+install+a+font+on+gnu%2Blinux
  Windows: https://support.microsoft.com/en-us/help/314960/how-to-install-or-remove-a-font-in-windows

Android Apps

  https://developers.google.com/fonts/docs/android
  https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts

License
-------
Please read the full license text (OFL.txt) to understand the permissions,
restrictions and requirements for usage, redistribution, and modification.

You can use them in your products & projects – print or digital,
commercial or otherwise.

This isn't legal advice, please consider consulting a lawyer and see the full
license for all details.



================================================
FILE: public/fonts/Inter/static/Inter_18pt-Black.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-BlackItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-Bold.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-BoldItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-ExtraBold.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-ExtraBoldItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-ExtraLight.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-ExtraLightItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-Italic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-Light.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-LightItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-Medium.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-MediumItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-Regular.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-SemiBold.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-SemiBoldItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-Thin.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_18pt-ThinItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-Black.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-BlackItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-Bold.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-BoldItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-ExtraBold.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-ExtraBoldItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-ExtraLight.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-ExtraLightItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-Italic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-Light.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-LightItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-Medium.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-MediumItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-Regular.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-SemiBold.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-SemiBoldItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-Thin.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_24pt-ThinItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-Black.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-BlackItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-Bold.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-BoldItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-ExtraBold.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-ExtraBoldItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-ExtraLight.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-ExtraLightItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-Italic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-Light.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-LightItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-Medium.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-MediumItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-Regular.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-SemiBold.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-SemiBoldItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-Thin.ttf
================================================
[Non-text file]


================================================
FILE: public/fonts/Inter/static/Inter_28pt-ThinItalic.ttf
================================================
[Non-text file]


================================================
FILE: public/.well-known/farcaster.json
================================================
{
  "accountAssociation": {
    "header": "eyJmaWQiOjIzOTM5NiwidHlwZSI6ImN1c3RvZHkiLCJrZXkiOiIweDRENEU1MjIzODRkNkYxMDkwYkZENEM0NTI3YTdkNTJERmQyMGJDYTMifQ",
    "payload": "eyJkb21haW4iOiJidXN0ZXItbWt0LnZlcmNlbC5hcHAifQ",
    "signature": "MHg4ZmE0MGM1MGRiN2RkNjEyZGIzMzNlNzg1NTA0YjZhNzg4OTJjNTQ4YTA2ODEyNWIzOTI2M2RjMThjMmM4N2Y4MGQ0MWY4NjYyMWE5NjAzNjlmMDU4ZWIzNWRiOTgwYjRlZDY1YjI2YjFlZWE3NTYwNGZlZmQ0NzI1ZGQ3NWUzZDFi"
  },
  "frame": {
    "version": "1",
    "name": "POLICAST PREDICTION MARKET",
    "iconUrl": "https://buster-mkt.vercel.app/icon.jpg",
    "homeUrl": "https://buster-mkt.vercel.app",
    "imageUrl": "https://buster-mkt.vercel.app/icon.jpg",
    "buttonTitle": "Explore Markets🏪",
    "splashImageUrl": "https://buster-mkt.vercel.app/icon.jpg",
    "splashBackgroundColor": "#ffffff",
    "webhookUrl": "https://buster-mkt.vercel.app/api/webhook"
  }
}



================================================
FILE: src/app/client.ts
================================================
import { createThirdwebClient } from "thirdweb";

const clientId = process.env.NEXT_PUBLIC_THIRDWEB_CLIENT_ID;

if (!clientId) {
  throw new Error(
    "NEXT_PUBLIC_THIRDWEB_CLIENT_ID is not set in environment variables. Please add it to .env.local or Vercel environment variables."
  );
}

export const client = createThirdwebClient({
  clientId: clientId as string,
});



================================================
FILE: src/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}



================================================
FILE: src/app/layout.tsx
================================================
import type { Metadata } from "next";
import localFont from "next/font/local";
import "./globals.css";
import { ThirdwebProvider } from "thirdweb/react";
import { Toaster } from "@/components/ui/toaster";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});
const geistMono = localFont({
  src: "./fonts/GeistMonoVF.woff",
  variable: "--font-geist-mono",
  weight: "100 900",
});

export const metadata: Metadata = {
  title: "Forecast",
  description: "political prediction market",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <ThirdwebProvider>{children}</ThirdwebProvider>
        <Toaster />
      </body>
    </html>
  );
}



================================================
FILE: src/app/page.tsx
================================================
// src/app/page.tsx
import { EnhancedPredictionMarketDashboard } from "@/components/enhanced-prediction-market-dashboard";
import { OnboardingModal } from "@/components/OnboardingModal";
import { Metadata } from "next";

export const metadata: Metadata = {
  title: "Forecast - Prediction Market",
  description: "Forecast outcomes!",
  openGraph: {
    title: "Forecast",
    images: ["/icon.jpg"],
  },
  other: {
    "fc:frame": JSON.stringify({
      version: "next",
      imageUrl: "https://buster-mkt.vercel.app/icon.jpg",
      button: {
        title: "Farcaster Prediction Market",
        action: {
          type: "launch_frame",
          name: "Forecast",
          iconUrl: "https://buster-mkt.vercel.app/icon.jpg",
          url: "https://buster-mkt.vercel.app",
          splashImageUrl: "https://buster-mkt.vercel.app/icon.jpg",
          splashBackgroundColor: "#ffffff",
        },
      },
    }),
  },
};

export default function Home() {
  return (
    <>
      {" "}
      {/* <-- 2a. Wrap in a Fragment */}
      <EnhancedPredictionMarketDashboard />
      <OnboardingModal /> {/* <-- 2b. Render the modal */}
    </>
  );
}



================================================
FILE: src/app/api/frame-action/route.tsx
================================================
import { NextRequest, NextResponse } from "next/server";
import { readContract } from "thirdweb";
import { contract } from "@/constants/contract";

type MarketInfoContractReturn = readonly [
  string,
  string,
  string,
  bigint,
  number,
  bigint,
  bigint,
  boolean
];

export async function POST(req: NextRequest) {
  let marketId: string | undefined;
  let rawState: string | undefined;
  try {
    const body = await req.json();
    const buttonIndex = body.untrustedData?.buttonIndex;
    rawState = body.untrustedData?.state;

    console.log("Frame Action: Raw state received:", rawState);

    const decodedState = rawState
      ? (() => {
          try {
            return JSON.parse(decodeURIComponent(rawState));
          } catch (e) {
            console.error("Frame Action: Failed to parse state:", e);
            return {};
          }
        })()
      : {};

    marketId = decodedState.marketId;

    console.log("Frame Action: Extracted marketId:", marketId);

    if (!marketId || isNaN(Number(marketId))) {
      console.error("Frame Action: Invalid marketId", marketId);
      throw new Error("Invalid marketId in frame state");
    }

    const baseUrl =
      process.env.NEXT_PUBLIC_APP_URL || "https://buster-mkt.vercel.app";
    const imageUrl = `${baseUrl}/api/market-image?marketId=${marketId}&t=${Date.now()}`;
    const postUrl = `${baseUrl}/api/frame-action`;
    const marketUrl = `${baseUrl}/market/${marketId}`;

    const marketData = (await readContract({
      contract,
      method:
        "function getMarketInfo(uint256 _marketId) view returns (string question, string optionA, string optionB, uint256 endTime, uint8 outcome, uint256 totalOptionAShares, uint256 totalOptionBShares, bool resolved)",
      params: [BigInt(marketId)],
    })) as MarketInfoContractReturn;

    if (!marketData || marketData.length < 8) {
      console.error(
        `Frame Action: Failed to fetch valid market data for ${marketId}`
      );
      throw new Error(`Failed to fetch market data for ${marketId}`);
    }
    //eslint-disable-next-line @typescript-eslint/no-unused-vars
    const optionA = marketData[1];
    //eslint-disable-next-line @typescript-eslint/no-unused-vars
    const optionB = marketData[2];
    const totalOptionAShares = marketData[5];
    const totalOptionBShares = marketData[6];
    const endTime = marketData[3];
    //eslint-disable-next-line @typescript-eslint/no-unused-vars
    const resolved = marketData[7];

    const total = totalOptionAShares + totalOptionBShares;
    //eslint-disable-next-line @typescript-eslint/no-unused-vars
    const yesPercent =
      total > 0n
        ? (Number((totalOptionAShares * 1000n) / total) / 10).toFixed(1)
        : "0.0";
    //eslint-disable-next-line @typescript-eslint/no-unused-vars
    const noPercent =
      total > 0n
        ? (Number((totalOptionBShares * 1000n) / total) / 10).toFixed(1)
        : "0.0";
    //eslint-disable-next-line @typescript-eslint/no-unused-vars
    const endDate = new Date(Number(endTime) * 1000).toLocaleDateString();

    if (buttonIndex === 1) {
      // "View Market" button - render a new frame with market details
      return NextResponse.json({
        frame: {
          version: "vNext",
          image: `${imageUrl}&view=details`, // Add view=details parameter
          post_url: postUrl,
          buttons: [
            { label: "Back", action: "post" },
            { label: "Open in App", action: "link", target: marketUrl },
          ],
          state: JSON.stringify({ marketId, view: "details" }),
        },
        message: "Viewing market details",
      });
    }

    if (decodedState.view === "details" && buttonIndex === 1) {
      // "Back" button - return to initial frame
      return NextResponse.json({
        frame: {
          version: "vNext",
          image: imageUrl,
          post_url: postUrl,
          buttons: [{ label: "View Market", action: "post" }],
          state: JSON.stringify({ marketId }),
        },
        message: "Back to market overview",
      });
    }

    // Default frame (shouldn’t be reached after initial frame)
    return NextResponse.json({
      frame: {
        version: "vNext",
        image: imageUrl,
        post_url: postUrl,
        buttons: [{ label: "View Market", action: "post" }],
        state: JSON.stringify({ marketId }),
      },
    });
  } catch (error: unknown) {
    console.error(
      `Frame action error (MarketId: ${marketId ?? "unknown"}):`,
      error,
      error instanceof Error ? error.stack : undefined
    );
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";

    const fallbackMarketId = marketId ?? "error";
    const baseUrl =
      process.env.NEXT_PUBLIC_APP_URL || "https://buster-mkt.vercel.app";
    return NextResponse.json({
      frame: {
        version: "vNext",
        image: `${baseUrl}/api/market-image?marketId=${fallbackMarketId}&error=true`,
        post_url: `${baseUrl}/api/frame-action`,
        buttons: [{ label: "Try Again", action: "post" }], // Use "Try Again" to avoid loops
        state: JSON.stringify({ marketId: fallbackMarketId }),
      },
      message: `Error: ${errorMessage.substring(0, 100)}`,
    });
  }
}



================================================
FILE: src/app/api/leaderboard/route.ts
================================================
import { NextResponse } from "next/server";
import { NeynarAPIClient } from "@neynar/nodejs-sdk";
import { client } from "@/app/client";
import { base } from "thirdweb/chains";
import {
  getContract,
  getContractEvents,
  prepareEvent,
  readContract,
} from "thirdweb";
import { eth_blockNumber, eth_getBlockByNumber } from "thirdweb/rpc";
import { getRpcClient } from "thirdweb/rpc";
import NodeCache from "node-cache";

// Initialize cache
const cache = new NodeCache({ stdTTL: 300, checkperiod: 60 });
const CACHE_KEY = "leaderboard";
const LAST_BLOCK_KEY = "last_fetched_block";
const NEYNAR_CACHE_KEY = "neynar_users";

// Define types
interface ClaimedEvent {
  args: {
    marketId: bigint;
    user: string;
    amount: bigint;
  };
  blockNumber: bigint;
}

interface NeynarRawUser {
  username: string;
  fid: number;
  pfp_url?: string;
}

interface NeynarUser {
  username: string;
  fid: string;
  pfp_url: string | null;
}

interface LeaderboardEntry {
  username: string;
  fid: string;
  pfp_url: string | null;
  winnings: number;
  address: string;
}

// Contract ABI
const CONTRACT_ABI = [
  {
    type: "event",
    name: "Claimed",
    inputs: [
      { indexed: true, name: "marketId", type: "uint256" },
      { indexed: true, name: "user", type: "address" },
      { indexed: false, name: "amount", type: "uint256" },
    ],
    anonymous: false,
  },
  {
    type: "function",
    name: "bettingToken",
    inputs: [],
    outputs: [{ name: "", type: "address" }],
    stateMutability: "view",
  },
] as const;

// Initialize contract
const contract = getContract({
  client,
  chain: base,
  address: "0xc703856dc56576800F9bc7DfD6ac15e92Ac2d7D6",
  abi: CONTRACT_ABI,
});

const CLAIMED_EVENT = prepareEvent({
  signature:
    "event Claimed(uint256 indexed marketId, address indexed user, uint256 amount)",
});

// Retry utility
async function withRetry<T>(
  fn: () => Promise<T>,
  retries = 3,
  delay = 1000
): Promise<T> {
  for (let i = 0; i < retries; i++) {
    try {
      return await fn();
    } catch (error) {
      if (i === retries - 1) throw error;
      console.warn(`Retry ${i + 1}/${retries} failed:`, error);
      await new Promise((resolve) => setTimeout(resolve, delay));
    }
  }
  throw new Error("Max retries reached");
}

export async function GET() {
  try {
    console.log("🚀 Starting leaderboard fetch...");

    // Check cache
    const cachedLeaderboard = cache.get<LeaderboardEntry[]>(CACHE_KEY);
    if (cachedLeaderboard) {
      console.log("✅ Serving from cache");
      return NextResponse.json(cachedLeaderboard);
    }

    // Validate environment variables
    const neynarApiKey = process.env.NEYNAR_API_KEY;
    if (!neynarApiKey) {
      console.error("❌ NEYNAR_API_KEY is not set");
      return NextResponse.json(
        { error: "Server configuration error: Missing NEYNAR_API_KEY" },
        { status: 500 }
      );
    }

    // Initialize Neynar client
    const neynar = new NeynarAPIClient({ apiKey: neynarApiKey });
    console.log("✅ Neynar client initialized.");

    // Fetch latest block number and timestamp
    console.log("🔗 Fetching latest block number...");
    const rpcClient = getRpcClient({ client, chain: base });
    const latestBlock = await withRetry(() => eth_blockNumber(rpcClient));
    const blockInfo = await withRetry(() =>
      eth_getBlockByNumber(rpcClient, { blockNumber: latestBlock })
    );
    const lastUpdated = Number(blockInfo.timestamp) * 1000; // Convert to ms
    console.log(`🔢 Latest block: ${latestBlock}, Timestamp: ${lastUpdated}`);

    // Fetch bettingToken metadata
    const bettingTokenAddress = await readContract({
      contract,
      method: "bettingToken",
      params: [],
    });
    const tokenContract = getContract({
      client,
      chain: base,
      address: bettingTokenAddress,
    });
    const [tokenSymbol, tokenDecimals] = await Promise.all([
      readContract({
        contract: tokenContract,
        method: "function symbol() view returns (string)",
        params: [],
      }),
      readContract({
        contract: tokenContract,
        method: "function decimals() view returns (uint8)",
        params: [],
      }),
    ]);
    console.log(`💸 Token: ${tokenSymbol}, Decimals: ${tokenDecimals}`);

    // Fetch Claimed events
    console.log("📦 Fetching Claimed events...");
    const DEPLOYMENT_BLOCK = BigInt(28965072);
    const cachedBlock = cache.get<string>(LAST_BLOCK_KEY);
    let fromBlock = cachedBlock ? BigInt(cachedBlock) : DEPLOYMENT_BLOCK;
    const blockRange = BigInt(1000);
    const allEvents: ClaimedEvent[] = [];

    while (fromBlock <= latestBlock) {
      const toBlock =
        fromBlock + blockRange - BigInt(1) > latestBlock
          ? latestBlock
          : fromBlock + blockRange - BigInt(1);
      if (toBlock < fromBlock) {
        console.log(`🏁 Reached end of blocks to scan.`);
        break;
      }
      console.log(`📄 Fetching events from block ${fromBlock} to ${toBlock}`);
      const events = await withRetry(() =>
        getContractEvents({
          contract,
          events: [CLAIMED_EVENT],
          fromBlock,
          toBlock,
        })
      );
      allEvents.push(...(events as ClaimedEvent[]));
      console.log(`✅ Fetched ${events.length} events in this batch.`);
      fromBlock = toBlock + BigInt(1);
    }

    console.log(`🧾 Total Claimed events fetched: ${allEvents.length}`);

    // Aggregate winnings
    console.log("💰 Aggregating winnings...");
    const winnersMap = new Map<string, number>();
    for (const event of allEvents) {
      if (
        !event.args ||
        typeof event.args.user !== "string" ||
        typeof event.args.amount === "undefined"
      ) {
        console.warn("⚠️ Invalid event args:", JSON.stringify(event, null, 2));
        continue;
      }
      const user = event.args.user.toLowerCase();
      const amountWei = BigInt(event.args.amount);
      const amountDecimal = Number(amountWei) / Math.pow(10, tokenDecimals);
      winnersMap.set(user, (winnersMap.get(user) || 0) + amountDecimal);
    }
    console.log("📊 Winners map:", Array.from(winnersMap.entries()));

    // Convert to winners array
    const winners = Array.from(winnersMap.entries()).map(
      ([address, winnings]) => ({
        address,
        winnings,
      })
    );
    console.log("🏅 Winners extracted:", winners);

    // Fetch Farcaster usernames
    console.log("📬 Fetching Farcaster users...");
    const neynarCache =
      cache.get<Record<string, NeynarUser[]>>(NEYNAR_CACHE_KEY) || {};
    const addressesToFetch = winners
      .map((w) => w.address)
      .filter((addr) => !neynarCache[addr]);
    let addressToUsersMap: Record<string, NeynarUser[]> = { ...neynarCache };

    if (addressesToFetch.length > 0) {
      console.log(
        `📬 Requesting Neynar for ${addressesToFetch.length} addresses`
      );
      try {
        const newUsersMap = await withRetry(() =>
          neynar.fetchBulkUsersByEthOrSolAddress({
            addresses: addressesToFetch,
            addressTypes: ["custody_address", "verified_address"],
          })
        );
        // Transform raw users to NeynarUser
        const transformedUsersMap: Record<string, NeynarUser[]> = {};
        for (const [address, users] of Object.entries(newUsersMap)) {
          transformedUsersMap[address] = users.map((user: NeynarRawUser) => ({
            username: user.username,
            fid: user.fid.toString(),
            pfp_url: user.pfp_url || null,
          }));
        }
        addressToUsersMap = { ...addressToUsersMap, ...transformedUsersMap };
        cache.set(NEYNAR_CACHE_KEY, addressToUsersMap);
        console.log(
          `✅ Neynar responded. Found users for ${
            Object.keys(transformedUsersMap).length
          } addresses.`
        );
      } catch (neynarError) {
        console.error("❌ Neynar API error:", neynarError);
      }
    } else {
      console.log("🤷 All addresses cached for Neynar.");
    }

    // Build leaderboard
    console.log("🧠 Building leaderboard...");
    const leaderboard: LeaderboardEntry[] = winners
      .map((winner) => {
        const usersForAddress = addressToUsersMap[winner.address];
        const user =
          usersForAddress && usersForAddress.length > 0
            ? usersForAddress[0]
            : undefined;
        return {
          username:
            user?.username ||
            `${winner.address.slice(0, 6)}...${winner.address.slice(-4)}`,
          fid: user?.fid || "nil",
          pfp_url: user?.pfp_url || null,
          winnings: winner.winnings,
          address: winner.address,
        };
      })
      .sort((a, b) => b.winnings - a.winnings)
      .slice(0, 10);

    console.log("🏆 Final Leaderboard:", leaderboard);

    // Cache leaderboard and last block
    cache.set(CACHE_KEY, leaderboard);
    cache.set(LAST_BLOCK_KEY, latestBlock.toString());
    console.log("✅ Cached leaderboard and last block");

    return NextResponse.json({
      leaderboard,
      tokenSymbol,
      lastUpdated,
    });
  } catch (error) {
    console.error("❌ Leaderboard fetch error:", error);
    console.error((error as Error).stack);
    return NextResponse.json(
      {
        error: "Failed to fetch leaderboard",
        details: (error as Error).message || "Unknown error",
      },
      { status: 500 }
    );
  }
}



================================================
FILE: src/app/api/market-image/route.tsx
================================================
import { NextRequest, NextResponse } from "next/server"; // Use NextRequest
import { getContract, readContract } from "thirdweb";
import { base } from "thirdweb/chains";
import { client } from "@/app/client";
import satori from "satori";
import sharp from "sharp";
import { promises as fs } from "fs";
import path from "node:path";
import { format } from "date-fns";

// Define contract (ensure this is the correct address and chain)
const contractAddress =
  process.env.CONTRACT_ADDRESS || "0xc703856dc56576800F9bc7DfD6ac15e92Ac2d7D6";
const contract = getContract({
  client,
  chain: base, // Make sure this matches your deployment (base or baseSepolia)
  address: contractAddress,
});

// Interface for the data needed by the image generator
interface MarketImageData {
  question: string;
  optionA: string;
  optionB: string;
  totalOptionAShares: bigint;
  totalOptionBShares: bigint;
  endTime: bigint;
  resolved: boolean;
  // Add other fields if needed by the image (endTime, resolved, etc.)
}

// --- CORRECTED: Type matching the ACTUAL contract return order ---
type MarketInfoContractReturn = readonly [
  string, // question (index 0)
  string, // optionA (index 1)
  string, // optionB (index 2)
  bigint, // endTime (index 3)
  number, // outcome (index 4 - uint8)
  bigint, // totalOptionAShares (index 5)
  bigint, // totalOptionBShares (index 6)
  boolean // resolved (index 7)
];
// --- END CORRECTION ---

async function fetchMarketData(marketId: string): Promise<MarketImageData> {
  console.log(`Market Image API: Fetching info for marketId ${marketId}...`);
  try {
    // --- CORRECTED: Method signature matching the contract ---
    const marketData = (await readContract({
      contract,
      method:
        "function getMarketInfo(uint256 _marketId) view returns (string question, string optionA, string optionB, uint256 endTime, uint8 outcome, uint256 totalOptionAShares, uint256 totalOptionBShares, bool resolved)",
      params: [BigInt(marketId)],
    })) as MarketInfoContractReturn; // Use the corrected type
    // --- END CORRECTION ---

    console.log(
      `Market Image API: Raw data received for marketId ${marketId}:`,
      marketData
    );

    // Basic validation
    if (!marketData || !Array.isArray(marketData) || marketData.length < 8) {
      console.error(
        `Market Image API: Invalid or incomplete data received from contract for marketId ${marketId}`,
        marketData
      );
      throw new Error("Incomplete data received from contract");
    }

    // --- CORRECTED: Access data using correct indices ---
    return {
      question: marketData[0], // Correct index
      optionA: marketData[1], // Correct index
      optionB: marketData[2], // Correct index
      endTime: marketData[3],
      totalOptionAShares: marketData[5], // Correct index
      totalOptionBShares: marketData[6], // Correct index
      resolved: marketData[7],
    };
    // --- END CORRECTION ---
  } catch (error) {
    // Log the specific error during fetch
    console.error(
      `Market Image API: Failed to fetch or parse market ${marketId}:`,
      error
    );
    // Re-throw to be caught by the main handler
    throw error;
  }
}

function formatEndTime(endTimeSeconds: bigint): string {
  try {
    const endDate = new Date(Number(endTimeSeconds) * 1000);
    // Example format: "Ends May 1, 2024 @ 10:30 PM UTC"
    // Adjust format string as needed (see date-fns docs)
    return `Ends ${format(endDate, "MMM d, yyyy '@' h:mm a 'UTC'")}`;
  } catch (e) {
    console.error("Error formatting time:", e);
    return "Ends: Invalid Date";
  }
}

// --- Load font data outside the handler for efficiency ---
const regularFontPath = path.join(
  process.cwd(),
  "public",
  "fonts",
  "Inter",
  "static",
  "Inter_18pt-Regular.ttf" // Assuming you have Regular too
);
const boldFontPath = path.join(
  process.cwd(),
  "public",
  "fonts",
  "Inter",
  "static",
  "Inter_18pt-Bold.ttf" // Path to Bold font
);

console.log("Attempting to load fonts from:", regularFontPath, boldFontPath);

// Read both files
const regularFontDataPromise = fs.readFile(regularFontPath);
const boldFontDataPromise = fs.readFile(boldFontPath);

// const fontDataPromise = fs.readFile(fontPath);
// ---

export async function GET(request: NextRequest) {
  // Use NextRequest
  const { searchParams } = new URL(request.url);
  const marketId = searchParams.get("marketId");

  console.log(
    `--- Market Image API: Received request for marketId: ${marketId} ---`
  );

  if (!marketId || isNaN(Number(marketId))) {
    console.error("Market Image API: Invalid or missing marketId");
    return new NextResponse("Invalid market ID", { status: 400 });
  }

  try {
    const market = await fetchMarketData(marketId); // Fetch data using corrected function

    // --- Use BigInt for calculations before converting to Number for display ---
    const total = market.totalOptionAShares + market.totalOptionBShares;
    const yesPercentNum =
      total > 0n
        ? Number((market.totalOptionAShares * 10000n) / total) / 100
        : 0;
    const noPercentNum =
      total > 0n
        ? Number((market.totalOptionBShares * 10000n) / total) / 100
        : 0;
    // --- END BigInt Calculation ---

    // Format for display
    const yesPercentDisplay = yesPercentNum.toFixed(1);
    const noPercentDisplay = noPercentNum.toFixed(1);

    // Format the end time
    const formattedTime = formatEndTime(market.endTime);

    console.log(
      `Market Image API: Generating image for marketId ${marketId} with percentages: ${yesPercentDisplay}% / ${noPercentDisplay}%`
    );

    // Wait for font data to be loaded
    const [regularFontData, boldFontData] = await Promise.all([
      regularFontDataPromise,
      boldFontDataPromise,
    ]);

    // Generate SVG with satori
    const svg = await satori(
      <div
        style={{
          display: "flex",
          flexDirection: "column",
          alignItems: "stretch", // Stretch children width
          justifyContent: "space-between", // Space out header, content, footer (if any)
          width: "1200px",
          height: "630px",
          backgroundColor: "#f8f9fa", // Lighter gray background
          color: "#212529", // Darker text
          fontFamily: '"Inter"',
          padding: "40px 50px", // Adjust padding
        }}
      >
        <div
          style={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            width: "100%",
            fontSize: "24px",
            color: "#6c757d" /* Gray text */,
          }}
        >
          <span>Buster Market</span>
          <span>{formattedTime}</span>
        </div>
        <div
          style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            flexGrow: 1,
            justifyContent: "center",
          }}
        >
          {/* Question */}
          <h1
            style={{
              fontSize: "52px", // Slightly larger
              fontWeight: 700, // Use bold weight
              textAlign: "center",
              marginBottom: "40px", // Space below question
              maxWidth: "1000px",
              lineHeight: 1.3,
            }}
          >
            {market.question}
          </h1>

          {/* Progress Bar Area */}
          <div
            style={{
              width: "80%",
              display: "flex",
              flexDirection: "column",
              alignItems: "center",
            }}
          >
            {/* Bar */}
            <div
              style={{
                display: "flex",
                width: "100%",
                height: "24px",
                backgroundColor: "#e9ecef",
                borderRadius: "12px",
                overflow: "hidden",
                marginBottom: "15px",
              }}
            >
              <div
                style={{
                  width: `${yesPercentNum}%`,
                  backgroundColor: "#28a745" /* Green */,
                }}
              ></div>
              <div
                style={{
                  width: `${noPercentNum}%`,
                  backgroundColor: "#dc3545" /* Red */,
                }}
              ></div>
            </div>
            {/* Labels */}
            <div
              style={{
                display: "flex",
                justifyContent: "space-between",
                width: "100%",
                fontSize: "28px",
              }}
            >
              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "flex-start",
                  color: "#28a745",
                }}
              >
                <span style={{ fontSize: "24px", color: "#495057" }}>
                  {market.optionA}
                </span>
                <span style={{ fontWeight: 700 }}>{yesPercentDisplay}%</span>
              </div>
              <div
                style={{
                  display: "flex",
                  flexDirection: "column",
                  alignItems: "flex-end",
                  color: "#dc3545",
                }}
              >
                <span style={{ fontSize: "24px", color: "#495057" }}>
                  {market.optionB}
                </span>
                <span style={{ fontWeight: 700 }}>{noPercentDisplay}%</span>
              </div>
            </div>
          </div>
        </div>

        {/* Footer (Optional) */}
        <div
          style={{
            display: "flex", // <-- ADD THIS
            justifyContent: "center", // <-- ADD THIS (to center the text horizontally)
            alignItems: "center", // <-- Optional: Vertically center if needed
            width: "100%",
            // textAlign: "center", // justifyContent replaces textAlign for flex
            fontSize: "18px",
            color: "#adb5bd",
          }}
        >
          Market ID: {marketId}
        </div>
      </div>,
      {
        width: 1200,
        height: 630,
        // --- UPDATED: Include both fonts ---
        fonts: [
          {
            name: "Inter",
            data: regularFontData,
            weight: 400, // Regular
            style: "normal",
          },
          {
            name: "Inter",
            data: boldFontData,
            weight: 700, // Bold
            style: "normal",
          },
        ],
        // --- END UPDATE ---
      }
    );

    // Convert SVG to PNG with sharp
    const pngBuffer = await sharp(Buffer.from(svg)).png().toBuffer();

    console.log(
      `Market Image API: Successfully generated PNG for marketId ${marketId}`
    );

    // Return PNG response
    return new NextResponse(pngBuffer, {
      status: 200, // Explicitly set status 200
      headers: {
        "Content-Type": "image/png",
        "Cache-Control": "public, max-age=60", // Shorter cache during debugging
        "Access-Control-Allow-Origin": "*",
      },
    });
  } catch (error) {
    // Log the error that occurred anywhere in the process
    console.error(
      `Market Image API: Overall failure for marketId ${marketId}:`,
      error
    );
    // Return a generic 500 error response
    return new NextResponse("Failed to generate image", { status: 500 });
  }
}



================================================
FILE: src/app/api/webhook/route.ts
================================================
import { NextResponse } from "next/server";

export async function POST(request: Request) {
  try {
    const body = await request.json();
    console.log("Webhook received:", body);
    // Process webhook (e.g., log user interactions)
    return NextResponse.json({ status: "ok" });
  } catch (error) {
    console.error("Webhook error:", error);
    return NextResponse.json(
      { error: "Failed to process webhook" },
      { status: 500 }
    );
  }
}



================================================
FILE: src/app/fonts/GeistMonoVF.woff
================================================
[Non-text file]


================================================
FILE: src/app/fonts/GeistVF.woff
================================================
[Non-text file]


================================================
FILE: src/app/market/[marketId]/page.tsx
================================================
import { Metadata, ResolvingMetadata } from "next";
import { getContract, readContract } from "thirdweb";
import { base } from "thirdweb/chains";
import { client } from "@/app/client";
import { MarketCard, Market } from "@/components/marketCard";
import { MiniAppClient } from "@/components/MiniAppClient";

// Contract definition
const contractAddress =
  process.env.CONTRACT_ADDRESS || "0xc703856dc56576800F9bc7DfD6ac15e92Ac2d7D6";
const contract = getContract({
  client,
  chain: base,
  address: contractAddress,
});

// Interface for market data
type MarketInfoContractReturn = readonly [
  string,
  string,
  string,
  bigint,
  number,
  bigint,
  bigint,
  boolean
];

async function fetchMarketData(marketId: string): Promise<Market> {
  try {
    const marketData = (await readContract({
      contract,
      method:
        "function getMarketInfo(uint256 _marketId) view returns (string question, string optionA, string optionB, uint256 endTime, uint8 outcome, uint256 totalOptionAShares, uint256 totalOptionBShares, bool resolved)",
      params: [BigInt(marketId)],
    })) as MarketInfoContractReturn;

    return {
      question: marketData[0],
      optionA: marketData[1],
      optionB: marketData[2],
      endTime: marketData[3],
      outcome: marketData[4],
      totalOptionAShares: marketData[5],
      totalOptionBShares: marketData[6],
      resolved: marketData[7],
    };
  } catch (error) {
    console.error(`Failed to fetch market ${marketId}:`, error);
    throw error;
  }
}

// generateMetadata: Handle params as Promise
export async function generateMetadata(
  { params }: { params: Promise<{ marketId: string }> },
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  parent: ResolvingMetadata
): Promise<Metadata> {
  try {
    const { marketId } = await params; // Await params
    const market = await fetchMarketData(marketId);

    const baseUrl =
      process.env.NEXT_PUBLIC_APP_URL || "https://buster-mkt.vercel.app";
    const imageUrl = `${baseUrl}/api/market-image?marketId=${marketId}`;
    const postUrl = `${baseUrl}/api/frame-action`;
    const marketUrl = `${baseUrl}/market/${marketId}`;

    const total = market.totalOptionAShares + market.totalOptionBShares;
    const yesPercent =
      total > 0n
        ? (Number((market.totalOptionAShares * 1000n) / total) / 10).toFixed(1)
        : "0.0";

    return {
      title: market.question,
      description: `View market: ${market.question} - ${market.optionA}: ${yesPercent}%`,
      other: {
        "fc:frame": "vNext",
        "fc:frame:image": imageUrl,
        "fc:frame:post_url": postUrl,
        "fc:frame:button:1": "View Market",
        "fc:frame:button:1:action": "post",
        "fc:frame:state": JSON.stringify({ marketId }),
      },
      metadataBase: new URL(baseUrl),
      openGraph: {
        title: market.question,
        description: `View market: ${market.question} - ${market.optionA}: ${yesPercent}%`,
        images: [
          { url: imageUrl, width: 1200, height: 630, alt: market.question },
        ],
        url: marketUrl,
        type: "website",
      },
      twitter: {
        card: "summary_large_image",
        title: market.question,
        description: `View market: ${market.question} - ${market.optionA}: ${yesPercent}%`,
        images: [imageUrl],
      },
    };
  } catch (error) {
    console.error("Error generating metadata:", error);
    return {
      title: "Market Not Found",
      description: "Unable to load market data for metadata",
    };
  }
}

// Page Component: Handle params as Promise
export default async function Page({
  params,
}: {
  params: Promise<{ marketId: string }>;
}) {
  try {
    const { marketId } = await params; // Await params
    const market = await fetchMarketData(marketId);
    console.log(`Market ${marketId}:`, market); // Debug log
    return (
      <div className="container mx-auto p-4">
        <MiniAppClient />
        <MarketCard index={Number(marketId)} market={market} />
      </div>
    );
  } catch (error) {
    console.error("Error rendering market page:", error);
    return (
      <div className="container mx-auto p-4">
        <h1 className="text-2xl font-bold text-red-600">Market Not Found</h1>
        <p>
          There was an error loading the market data. Please try again later.
        </p>
      </div>
    );
  }
}



================================================
FILE: src/components/ClaimTokensButton.tsx
================================================
// src/components/ClaimTokensButton.tsx
"use client";

import React, { useState } from "react";
import { useActiveAccount, useSendTransaction } from "thirdweb/react";
import { Button } from "@/components/ui/button";
import { Loader2 } from "lucide-react";
import { useToast } from "@/components/ui/use-toast";
import { getContract, prepareContractCall } from "thirdweb";
import { client } from "@/app/client";
import { base } from "thirdweb/chains";

const contract = getContract({
  client,
  chain: base,
  address: "0x55b04F15A1878fa5091D5E35ebceBC06A5EC2F31",
});

export function ClaimTokensButton() {
  const account = useActiveAccount();
  const [isClaimLoading, setIsClaimLoading] = useState(false);
  const { toast } = useToast();
  const { mutate: sendTransaction, isPending } = useSendTransaction();
  const [hasClaimed, setHasClaimed] = useState(false);
  const handleClaimTokens = async () => {
    if (!account) {
      toast({
        title: "Error",
        description: "Please connect your wallet.",
        variant: "destructive",
      });
      return;
    }

    setIsClaimLoading(true);
    try {
      const transaction = prepareContractCall({
        contract,
        method: "function claim() external",
        params: [],
      });

      await sendTransaction(transaction, {
        onSuccess: () => {
          toast({
            title: "Tokens Claimed!",
            description: "You've claimed 5000 BUSTER tokens.",
          });
          setHasClaimed(true);
        },
        onError: (error) => {
          let message = "Transaction failed.";
          if (error.message.includes("revert"))
            message = "Already claimed or limit reached.";
          toast({
            title: "Claim Failed",
            description: message,
            variant: "destructive",
          });
        },
      });
    } catch (error: unknown) {
      console.error("Claim error:", error);
      toast({
        title: "Claim Failed",
        description:
          error instanceof Error
            ? error.message
            : "An unexpected error occurred.",
        variant: "destructive",
      });
    } finally {
      setIsClaimLoading(false);
    }
  };

  if (!account || hasClaimed) {
    return null;
  }

  return (
    <Button
      onClick={handleClaimTokens}
      disabled={isClaimLoading || isPending}
      variant="outline"
      className="px-3 py-1 text-sm"
    >
      {isClaimLoading || isPending ? (
        <>
          <Loader2 className="mr-2 h-4 w-4 animate-spin" />
          Claiming...
        </>
      ) : (
        "Claim Tokens"
      )}
    </Button>
  );
}



================================================
FILE: src/components/enhanced-prediction-market-dashboard.tsx
================================================
"use client";

import { useReadContract, useActiveAccount } from "thirdweb/react"; // Added useActiveAccount
import { contract } from "@/constants/contract";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { MarketCard, Market } from "./marketCard"; // Import Market interface
import { Navbar } from "./navbar";
import { MarketCardSkeleton } from "./market-card-skeleton";
import { Footer } from "./footer";
import { useEffect, useState, useRef, useMemo } from "react"; // Added useMemo
import { sdk } from "@farcaster/frame-sdk";
import { VoteHistory } from "./VoteHistory";

type LeaderboardEntry = {
  username: string;
  fid: number | string;
  pfp_url: string | null;
  winnings: number;
  address: string;
};

export function EnhancedPredictionMarketDashboard() {
  const account = useActiveAccount(); // Get active account for VoteHistory check

  const { data: marketCount, isLoading: isLoadingMarketCount } =
    useReadContract({
      contract,
      method: "function getMarketCount() view returns (uint256)", // Use specific getter
      params: [],
    });

  // Fetch all market info to compute status counts
  const { data: marketInfos, isLoading: isLoadingMarketInfos } =
    useReadContract({
      contract,
      method:
        "function getMarketInfoBatch(uint256[] _marketIds) view returns (string[] questions, string[] optionAs, string[] optionBs, uint256[] endTimes, uint8[] outcomes, uint256[] totalOptionASharesArray, uint256[] totalOptionBSharesArray, bool[] resolvedArray)",
      params: [
        Array.from({ length: Number(marketCount || 0) }, (_, i) => BigInt(i)),
      ],
      // Enable only when marketCount is loaded and greater than 0
      queryOptions: { enabled: !!marketCount && marketCount > 0n },
    });

  // --- NEW: Process batch data into an array of Market objects ---
  const processedMarkets = useMemo(() => {
    if (!marketInfos || marketCount === undefined || marketCount === 0n) {
      return [];
    }

    const marketsArray: Market[] = [];
    const count = Number(marketCount); // Convert BigInt once

    // Deconstruct the marketInfos array for easier access
    const [
      questions,
      optionAs,
      optionBs,
      endTimes,
      outcomes, // Note: Solidity enum maps to number in JS/TS
      totalOptionASharesArray,
      totalOptionBSharesArray,
      resolvedArray,
    ] = marketInfos;

    for (let i = 0; i < count; i++) {
      // Check if all arrays have data for this index to prevent errors
      if (
        questions[i] !== undefined &&
        optionAs[i] !== undefined &&
        optionBs[i] !== undefined &&
        endTimes[i] !== undefined &&
        outcomes[i] !== undefined &&
        totalOptionASharesArray[i] !== undefined &&
        totalOptionBSharesArray[i] !== undefined &&
        resolvedArray[i] !== undefined
      ) {
        marketsArray.push({
          // index: i, // Add index if needed within MarketCard later
          question: questions[i],
          optionA: optionAs[i],
          optionB: optionBs[i],
          endTime: endTimes[i],
          outcome: outcomes[i], // Keep as number (0, 1, or 2)
          totalOptionAShares: totalOptionASharesArray[i],
          totalOptionBShares: totalOptionBSharesArray[i],
          resolved: resolvedArray[i],
        });
      } else {
        console.warn(`Incomplete data for market index ${i}. Skipping.`);
      }
    }
    return marketsArray;
  }, [marketInfos, marketCount]);
  // --- END NEW ---

  // --- REVISED: Compute market status counts from processedMarkets ---
  const { activeMarkets, pendingMarkets, resolvedMarkets } = useMemo(() => {
    const now = Math.floor(Date.now() / 1000); // Current timestamp in seconds
    const active: Market[] = [];
    const pending: Market[] = [];
    const resolved: Market[] = [];
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    processedMarkets.forEach((market, index) => {
      // Add index here if needed later
      const isExpired = Number(market.endTime) < now;
      const isResolved = market.resolved;

      if (isResolved) {
        // Optionally add index: resolved.push({ ...market, index });
        resolved.push(market);
      } else if (isExpired) {
        pending.push(market);
      } else {
        active.push(market);
      }
    });

    return {
      activeMarkets: active,
      pendingMarkets: pending,
      resolvedMarkets: resolved,
    };
  }, [processedMarkets]);

  const activeCount = activeMarkets.length;
  const pendingCount = pendingMarkets.length;
  const resolvedCount = resolvedMarkets.length;
  // --- END REVISED ---

  // Leaderboard state and fetching (keep as is)
  const [leaderboard, setLeaderboard] = useState<LeaderboardEntry[]>([]);
  const [isLoadingLeaderboard, setIsLoadingLeaderboard] = useState(true);
  const hasFetchedInitially = useRef(false);

  const fetchLeaderboardData = (setLoading = false) => {
    if (setLoading) setIsLoadingLeaderboard(true);
    console.log("Fetching leaderboard data...");
    fetch("/api/leaderboard")
      .then((res) => {
        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);
        return res.json();
      })
      .then((data) => {
        console.log("Leaderboard data received:", data);
        if (Array.isArray(data)) {
          setLeaderboard(data as LeaderboardEntry[]);
        } else {
          console.error("Received non-array data for leaderboard:", data);
          setLeaderboard([]);
        }
      })
      .catch((err) => {
        console.error("Leaderboard fetch error:", err);
        setLeaderboard([]);
      })
      .finally(() => {
        if (setLoading) setIsLoadingLeaderboard(false);
      });
  };

  useEffect(() => {
    if (!hasFetchedInitially.current) {
      fetchLeaderboardData(true);
      hasFetchedInitially.current = true;
    }
  }, []);

  useEffect(() => {
    const refreshInterval = 5 * 60 * 1000;
    console.log(
      `Setting up leaderboard refresh interval: ${refreshInterval}ms`
    );
    const intervalId = setInterval(() => {
      console.log("Triggering background leaderboard refresh...");
      fetchLeaderboardData(false);
    }, refreshInterval);
    return () => {
      console.log("Clearing leaderboard refresh interval.");
      clearInterval(intervalId);
    };
  }, []);

  // Signal readiness (keep as is)
  useEffect(() => {
    if (!isLoadingMarketCount) sdk.actions.ready();
  }, [isLoadingMarketCount]);

  // Skeleton and Empty State (keep as is)
  const skeletonCards = Array.from({ length: 6 }, (_, i) => (
    <MarketCardSkeleton key={`skeleton-${i}`} />
  ));

  const emptyState = (title: string, subtitle: string) => (
    <div className="flex flex-col items-center justify-center p-6 text-center">
      {/* SVG icon */}
      <svg /* ... */></svg>
      <p className="mt-2 text-sm font-medium text-gray-500">{title}</p>
      <p className="mt-1 text-xs text-gray-400">{subtitle}</p>
    </div>
  );

  // Determine if VoteHistory should be shown
  const showVoteHistory = !!account; // Show if user is connected

  return (
    <div className="min-h-screen flex flex-col">
      <div className="flex-grow container mx-auto p-4">
        <Navbar />
        <div className="mb-4">
          <img
            src="banner2.avif"
            alt="Buster Banner"
            className="w-full h-auto rounded-lg"
          />
        </div>
        <Tabs defaultValue="active" className="w-full">
          {/* --- REVISED: Conditionally render My Votes Tab --- */}
          <TabsList
            className={`grid w-full ${
              showVoteHistory ? "grid-cols-4" : "grid-cols-3"
            } overflow-x-auto whitespace-nowrap`}
          >
            <TabsTrigger value="active" className="text-xs px-2">
              Active
            </TabsTrigger>
            <TabsTrigger value="ended" className="text-xs px-2">
              Ended
            </TabsTrigger>
            <TabsTrigger value="leaderboard" className="text-xs px-2">
              Top
            </TabsTrigger>
            {showVoteHistory && (
              <TabsTrigger value="myvotes" className="text-xs px-2">
                Votes
              </TabsTrigger>
            )}
          </TabsList>
          {/* --- END REVISED --- */}

          {/* --- Show Skeletons while initial data loads --- */}
          {isLoadingMarketCount ||
          (marketCount !== undefined &&
            marketCount > 0n &&
            isLoadingMarketInfos) ? (
            <TabsContent value="active" className="mt-6">
              <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                {skeletonCards}
              </div>
            </TabsContent>
          ) : (
            <>
              {/* --- REVISED: Render Active Markets --- */}
              <TabsContent value="active" className="mt-6">
                {activeCount > 0 ? (
                  <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                    {activeMarkets.map((market, index) => (
                      <MarketCard
                        // Use a stable key, index within the filtered array is okay here
                        // Or use a unique ID from the market if available
                        key={`active-${index}`}
                        // Pass the original index if MarketCard needs it internally
                        // index={market.originalIndex} // If you added originalIndex during processing
                        index={processedMarkets.findIndex(
                          (m) =>
                            m.question === market.question &&
                            m.endTime === market.endTime
                        )} // Find original index
                        market={market}
                        // filter prop is no longer needed by MarketCard
                      />
                    ))}
                  </div>
                ) : (
                  emptyState(
                    "No active markets available",
                    "New markets will appear here when created"
                  )
                )}
              </TabsContent>

              {/* --- REVISED: Render Ended Markets (Pending/Resolved) --- */}
              <TabsContent value="ended" className="mt-6">
                <Tabs defaultValue="pending" className="w-full">
                  <TabsList className="grid w-full grid-cols-2">
                    <TabsTrigger value="pending" className="text-xs px-2">
                      Pending ({pendingCount}) {/* Optional: Show count */}
                    </TabsTrigger>
                    <TabsTrigger value="resolved" className="text-xs px-2">
                      Results ({resolvedCount}) {/* Optional: Show count */}
                    </TabsTrigger>
                  </TabsList>
                  <TabsContent value="pending" className="mt-4">
                    {" "}
                    {/* Added mt-4 */}
                    {pendingCount > 0 ? (
                      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                        {pendingMarkets.map((market, index) => (
                          <MarketCard
                            key={`pending-${index}`}
                            index={processedMarkets.findIndex(
                              (m) =>
                                m.question === market.question &&
                                m.endTime === market.endTime
                            )}
                            market={market}
                          />
                        ))}
                      </div>
                    ) : (
                      emptyState(
                        "No pending markets",
                        "Markets awaiting resolution will appear here"
                      )
                    )}
                  </TabsContent>
                  <TabsContent value="resolved" className="mt-4">
                    {" "}
                    {/* Added mt-4 */}
                    {resolvedCount > 0 ? (
                      <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
                        {resolvedMarkets.map((market, index) => (
                          <MarketCard
                            key={`resolved-${index}`}
                            index={processedMarkets.findIndex(
                              (m) =>
                                m.question === market.question &&
                                m.endTime === market.endTime
                            )}
                            market={market}
                          />
                        ))}
                      </div>
                    ) : (
                      emptyState(
                        "No resolved markets",
                        "Resolved markets will appear here"
                      )
                    )}
                  </TabsContent>
                </Tabs>
              </TabsContent>

              {/* Leaderboard Tab (keep as is, check loading/empty states) */}
              <TabsContent value="leaderboard" className="mt-6">
                {/* ... existing leaderboard rendering logic ... */}
                <div className="bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200">
                  <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
                    <h3 className="text-sm font-medium text-gray-700">
                      Top Predictors
                    </h3>
                  </div>
                  {isLoadingLeaderboard ? (
                    <div className="divide-y divide-gray-200">
                      {[1, 2, 3].map((i) => (
                        <div key={i} className="p-4 animate-pulse">
                          <div className="flex justify-between items-center">
                            <div className="flex items-center">
                              <div className="h-8 w-8 bg-gray-200 rounded-full mr-3"></div>
                              <div>
                                <div className="h-4 bg-gray-200 rounded w-32 mb-1"></div>
                                <div className="h-3 bg-gray-100 rounded w-16"></div>
                              </div>
                            </div>
                            <div className="h-5 bg-gray-200 rounded w-20"></div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : leaderboard.length > 0 ? (
                    <div className="divide-y divide-gray-200">
                      <div className="grid grid-cols-12 px-4 py-2 text-xs font-medium text-gray-500 bg-gray-50">
                        <div className="col-span-1 text-center">#</div>
                        <div className="col-span-9">Predictor</div>
                        <div className="col-span-2 text-right">Winnings</div>
                      </div>
                      {leaderboard.map((entry, idx) => (
                        <div
                          key={entry.fid}
                          className={`grid grid-cols-12 px-4 py-3 hover:bg-gray-50 transition-colors ${
                            idx < 3
                              ? "bg-gradient-to-r from-transparent to-blue-50"
                              : ""
                          }`}
                        >
                          <div className="col-span-1 flex items-center justify-center">
                            {idx < 3 ? (
                              <div
                                className={`flex items-center justify-center w-6 h-6 rounded-full
                                ${
                                  idx === 0
                                    ? "bg-yellow-100 text-yellow-800"
                                    : idx === 1
                                    ? "bg-gray-100 text-gray-800"
                                    : "bg-amber-100 text-amber-800"
                                }
                                text-xs font-bold`}
                              >
                                {idx + 1}
                              </div>
                            ) : (
                              <span className="text-gray-500 text-sm">
                                {idx + 1}
                              </span>
                            )}
                          </div>
                          <div className="col-span-9">
                            <div className="flex items-center">
                              {/* Simplified avatar placeholder */}
                              <div className="bg-purple-100 text-purple-800 w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm mr-3">
                                {entry.username
                                  ?.substring(0, 1)
                                  .toUpperCase() || "?"}
                              </div>
                              <div>
                                <div className="text-sm font-medium text-gray-900">
                                  {entry.username || `FID: ${entry.fid}`}
                                </div>
                                <div className="text-xs text-gray-500">
                                  FID: {entry.fid}
                                </div>
                              </div>
                            </div>
                          </div>
                          <div className="col-span-2 text-right">
                            <div className="text-sm font-medium text-gray-900">
                              {entry.winnings.toLocaleString()} $BSTR
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  ) : (
                    emptyState(
                      "No leaderboard data available",
                      "Leaderboard will appear once predictions are resolved"
                    )
                  )}
                </div>
              </TabsContent>

              {/* --- REVISED: Conditionally render My Votes Tab Content --- */}
              {showVoteHistory && (
                <TabsContent value="myvotes" className="mt-6">
                  <VoteHistory />
                </TabsContent>
              )}
              {/* --- END REVISED --- */}
            </>
          )}
        </Tabs>
      </div>
      <Footer />
    </div>
  );
}



================================================
FILE: src/components/footer.tsx
================================================
import Link from "next/link";

export function Footer() {
  return (
    <footer className="w-full border-t bg-background">
      <div className="container max-w-7xl mx-auto flex flex-col items-center justify-between gap-4 py-12 md:h-32 md:flex-row md:py-0">
        <div className="flex flex-col items-center gap-4 px-8 md:flex-row md:gap-2 md:px-0">
          <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
            Built by{" "}
            <Link
              href="https://warpcast.com/~/channel/politics"
              target="_blank"
              rel="noreferrer"
              className="font-medium underline underline-offset-4"
            >
              Politics
            </Link>
            .
          </p>
        </div>
      </div>
    </footer>
  );
}



================================================
FILE: src/components/market-buy-interface.tsx
================================================
import { Button } from "./ui/button";
import { Input } from "./ui/input";
import { useState, useRef, useEffect } from "react";
import { useActiveAccount, useSendAndConfirmTransaction } from "thirdweb/react";
import { prepareContractCall, readContract } from "thirdweb";
import { contract, tokenContract } from "@/constants/contract";
import { Loader2 } from "lucide-react";
import { cn } from "@/lib/utils";
import { useToast } from "@/components/ui/use-toast";

interface MarketBuyInterfaceProps {
  marketId: number;
  market: {
    question: string;
    optionA: string;
    optionB: string;
    totalOptionAShares: bigint;
    totalOptionBShares: bigint;
  };
}

type BuyingStep = "initial" | "amount" | "allowance" | "confirm";
type Option = "A" | "B" | null;

const MAX_BET = 500;

// Convert amount to token units (handles custom decimals)
function toUnits(amount: string, decimals: number): bigint {
  const [integer = "0", fraction = ""] = amount.split(".");
  const paddedFraction = fraction.padEnd(decimals, "0").slice(0, decimals);
  return (
    BigInt(integer + paddedFraction) *
    BigInt(10) ** BigInt(decimals - paddedFraction.length)
  );
}

export function MarketBuyInterface({
  marketId,
  market,
}: MarketBuyInterfaceProps) {
  const account = useActiveAccount();
  const { mutateAsync: mutateTransaction } = useSendAndConfirmTransaction();
  const { toast } = useToast();

  const [isBuying, setIsBuying] = useState(false);
  const [isVisible, setIsVisible] = useState(true);
  const [containerHeight, setContainerHeight] = useState("auto");
  const contentRef = useRef<HTMLDivElement>(null);
  const inputRef = useRef<HTMLInputElement>(null);

  const [selectedOption, setSelectedOption] = useState<Option>(null);
  const [amount, setAmount] = useState<string>("");
  const [buyingStep, setBuyingStep] = useState<BuyingStep>("initial");
  const [isApproving, setIsApproving] = useState(false);
  const [isConfirming, setIsConfirming] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [tokenSymbol, setTokenSymbol] = useState<string>("BUSTER");
  const [tokenDecimals, setTokenDecimals] = useState<number>(18);
  const [balance, setBalance] = useState<bigint>(0n);

  // Fetch token metadata and balance
  useEffect(() => {
    const fetchTokenData = async () => {
      try {
        const [symbol, decimals, userBalance] = await Promise.all([
          readContract({
            contract: tokenContract,
            method: "function symbol() view returns (string)",
            params: [],
          }),
          readContract({
            contract: tokenContract,
            method: "function decimals() view returns (uint8)",
            params: [],
          }),
          account
            ? readContract({
                contract: tokenContract,
                method: "function balanceOf(address) view returns (uint256)",
                params: [account.address],
              })
            : 0n,
        ]);
        setTokenSymbol(symbol);
        setTokenDecimals(decimals);
        setBalance(userBalance);
      } catch (error) {
        console.error("Failed to fetch token data", error);
        toast({
          title: "Error",
          description: "Failed to fetch token information",
          variant: "destructive",
        });
      }
    };
    fetchTokenData();
  }, [account, toast]);

  // Update container height
  useEffect(() => {
    if (contentRef.current) {
      setContainerHeight(`${contentRef.current.offsetHeight}px`);
    }
  }, [isBuying, buyingStep, isVisible, error]);

  // Focus input on amount step
  useEffect(() => {
    if (buyingStep === "amount" && inputRef.current) {
      inputRef.current.focus();
    }
  }, [buyingStep]);

  // Calculate implied odds
  const totalShares = market.totalOptionAShares + market.totalOptionBShares;
  const yesOdds =
    totalShares > 0n && market.totalOptionAShares > 0n
      ? Number((totalShares * 100n) / market.totalOptionAShares) / 100
      : 0;
  const noOdds =
    totalShares > 0n && market.totalOptionBShares > 0n
      ? Number((totalShares * 100n) / market.totalOptionBShares) / 100
      : 0;

  const handleBuy = (option: "A" | "B") => {
    setIsVisible(false);
    setTimeout(() => {
      setIsBuying(true);
      setSelectedOption(option);
      setBuyingStep("amount");
      setIsVisible(true);
    }, 200);
  };

  const handleCancel = () => {
    setIsVisible(false);
    setTimeout(() => {
      setIsBuying(false);
      setBuyingStep("initial");
      setSelectedOption(null);
      setAmount("");
      setError(null);
      setIsVisible(true);
    }, 200);
  };

  const checkApproval = async () => {
    const numAmount = Number(amount);
    if (!amount || numAmount <= 0) {
      setError("Amount must be greater than 0");
      return;
    }
    if (numAmount > MAX_BET) {
      toast({
        title: "Maximum Bet Exceeded",
        description: `Maximum shares you can buy is ${MAX_BET} ${tokenSymbol}`,
        variant: "destructive",
      });
      return;
    }

    try {
      if (!account) {
        toast({
          title: "Wallet Connection Required",
          description: "Please connect your wallet to continue",
          variant: "destructive",
        });
        return;
      }

      const amountInUnits = toUnits(amount, tokenDecimals);
      if (amountInUnits > balance) {
        toast({
          title: "Insufficient Balance",
          description: `You have ${(
            Number(balance) / Math.pow(10, tokenDecimals)
          ).toFixed(2)} ${tokenSymbol}, need ${amount}`,
          variant: "destructive",
        });
        return;
      }

      // Check allowance
      const userAllowance = await readContract({
        contract: tokenContract,
        method:
          "function allowance(address owner, address spender) view returns (uint256)",
        params: [account.address, contract.address],
      });

      // Proceed based on allowance
      setBuyingStep(amountInUnits > userAllowance ? "allowance" : "confirm");
      setError(null);
    } catch (error) {
      console.error("Allowance check error:", error);
      toast({
        title: "Error",
        description: "Failed to check token allowance",
        variant: "destructive",
      });
    }
  };

  const handleSetApproval = async () => {
    if (!account) {
      toast({
        title: "Wallet Connection Required",
        description: "Please connect your wallet to continue",
        variant: "destructive",
      });
      return;
    }

    setIsApproving(true);
    try {
      // Using prepareContractCall instead of the approve function
      // This is the ERC20 approval method
      const tx = await prepareContractCall({
        contract: tokenContract,
        method:
          "function approve(address spender, uint256 amount) returns (bool)",
        params: [
          contract.address,
          BigInt(
            "115792089237316195423570985008687907853269984665640564039457584007913129639935"
          ), // Max uint256
        ],
      });

      // Send the transaction and wait for confirmation
      await mutateTransaction(tx);

      // If successful, move to the next step
      setBuyingStep("confirm");

      toast({
        title: "Approval Successful",
        description: `You've approved ${tokenSymbol} for trading`,
        duration: 3000,
      });
    } catch (error) {
      console.error("Approval error:", error);
      // More descriptive error message
      let errorMessage =
        "Failed to approve token spending. Please check your wallet.";

      if (error instanceof Error) {
        if (error.message.includes("user rejected")) {
          errorMessage = "Transaction was rejected in your wallet";
        } else if (error.message.includes("insufficient funds")) {
          errorMessage = "Insufficient funds for gas";
        }
      }

      toast({
        title: "Approval Failed",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsApproving(false);
    }
  };

  const handleConfirm = async () => {
    if (!selectedOption || !amount || Number(amount) <= 0) {
      setError("Must select an option and enter an amount greater than 0");
      return;
    }

    if (!account) {
      toast({
        title: "Wallet Connection Required",
        description: "Please connect your wallet to continue",
        variant: "destructive",
      });
      return;
    }

    const numAmount = Number(amount);
    if (numAmount > MAX_BET) {
      toast({
        title: "Maximum Bet Exceeded",
        description: `Maximum shares you can buy is ${MAX_BET} ${tokenSymbol}`,
        variant: "destructive",
      });
      return;
    }

    setIsConfirming(true);
    try {
      const tx = await prepareContractCall({
        contract,
        method:
          "function buyShares(uint256 _marketId, bool _isOptionA, uint256 _amount)",
        params: [
          BigInt(marketId),
          selectedOption === "A",
          toUnits(amount, tokenDecimals),
        ],
      });
      await mutateTransaction(tx);
      toast({
        title: "Purchase Successful!",
        description: `You bought ${amount} ${
          selectedOption === "A" ? market.optionA : market.optionB
        } shares`,
        duration: 5000,
      });
      handleCancel();
    } catch (error: unknown) {
      console.error("Purchase error:", error);
      let errorMessage = "Failed to process purchase. Check your wallet.";
      if (error instanceof Error) {
        if (error.message.includes("user rejected")) {
          errorMessage = "Transaction was rejected in your wallet";
        } else if (error.message.includes("Market trading period has ended")) {
          errorMessage = "Market trading period has ended";
        } else if (error.message.includes("insufficient funds")) {
          errorMessage = "Insufficient funds for gas";
        }
      }
      toast({
        title: "Purchase Failed",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsConfirming(false);
    }
  };

  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const inputValue = e.target.value;
    if (inputValue === "") {
      setAmount("");
      setError(null);
      return;
    }
    if (!/^\d*\.?\d*$/.test(inputValue)) return; // Allow only valid numbers
    const parts = inputValue.split(".");
    if (parts[0].length > 15 || parts[1]?.length > tokenDecimals) return; // Limit size
    const numValue = Number(inputValue);
    if (numValue < 0) return; // Prevent negative
    setAmount(inputValue);
    setError(null);
  };

  const handleMaxBet = () => {
    const maxPossibleValue = Math.min(
      MAX_BET,
      Number(balance) / Math.pow(10, tokenDecimals)
    );
    const displayPrecision = Math.min(6, tokenDecimals);
    const formattedMaxAmount = maxPossibleValue.toFixed(displayPrecision);
    let finalAmountString = formattedMaxAmount;
    if (finalAmountString.includes(".")) {
      finalAmountString = finalAmountString.replace(/0+$/, "");
      if (finalAmountString.endsWith(".")) {
        finalAmountString = finalAmountString.slice(0, -1);
      }
    }
    setAmount(finalAmountString);
    setError(null);
  };

  return (
    <div
      className="relative transition-all duration-200 ease-in-out overflow-hidden"
      style={{ maxHeight: containerHeight }}
    >
      <div
        ref={contentRef}
        className={cn(
          "w-full transition-all duration-200 ease-in-out",
          isVisible ? "opacity-100 translate-y-0" : "opacity-0 translate-y-4"
        )}
      >
        {!isBuying ? (
          <div className="flex flex-col gap-4 mb-4">
            <h2 className="text-lg font-bold">{market.question}</h2>
            <div className="flex justify-between gap-4">
              <Button
                className="flex-1 min-w-[120px] bg-green-600 hover:bg-green-700"
                onClick={() => handleBuy("A")}
                aria-label={`Buy ${market.optionA} shares for "${market.question}"`}
                disabled={!account}
              >
                {market.optionA} ({yesOdds.toFixed(2)}x)
              </Button>
              <Button
                className="flex-1 min-w-[120px] bg-red-600 hover:bg-red-700"
                onClick={() => handleBuy("B")}
                aria-label={`Buy ${market.optionB} shares for "${market.question}"`}
                disabled={!account}
              >
                {market.optionB} ({noOdds.toFixed(2)}x)
              </Button>
            </div>
            {account && (
              <p className="text-xs text-gray-500 text-center">
                Available:{" "}
                {(Number(balance) / Math.pow(10, tokenDecimals)).toFixed(2)}{" "}
                {tokenSymbol}
              </p>
            )}
          </div>
        ) : (
          <div className="flex flex-col mb-4" aria-live="polite">
            <h2 className="text-lg font-bold mb-2">{market.question}</h2>
            <p className="text-sm text-gray-500 mb-4">
              Selected:{" "}
              {selectedOption === "A" ? market.optionA : market.optionB} (
              {(selectedOption === "A" ? yesOdds : noOdds).toFixed(2)}x)
            </p>
            {buyingStep === "amount" ? (
              <div className="flex flex-col">
                <span className="text-xs text-gray-500 mb-1">
                  Enter amount (Max: {MAX_BET} {tokenSymbol}, Available:{" "}
                  {(Number(balance) / Math.pow(10, tokenDecimals)).toFixed(2)}{" "}
                  {tokenSymbol})
                </span>
                <div className="flex flex-col gap-1 mb-4">
                  <div className="flex items-center gap-2">
                    <div className="flex-grow relative">
                      <Input
                        ref={inputRef}
                        type="text"
                        placeholder="Enter amount"
                        value={amount}
                        onChange={handleAmountChange}
                        onKeyDown={(e) => {
                          if (e.key === "Enter") checkApproval();
                          if (e.key === "-" || e.key === "e" || e.key === "+")
                            e.preventDefault();
                        }}
                        className={cn(
                          "w-full",
                          error && "border-red-500 focus-visible:ring-red-500"
                        )}
                        aria-describedby={error ? "amount-error" : undefined}
                      />
                    </div>
                    <Button
                      onClick={handleMaxBet}
                      variant="outline"
                      className="px-3"
                      aria-label="Set maximum bet amount"
                    >
                      Max
                    </Button>
                    <span className="font-bold whitespace-nowrap">
                      {tokenSymbol}
                    </span>
                  </div>
                  <div className="min-h-[20px]">
                    {error && (
                      <span id="amount-error" className="text-sm text-red-500">
                        {error}
                      </span>
                    )}
                  </div>
                </div>
                <div className="flex justify-between gap-4">
                  <Button
                    onClick={checkApproval}
                    className="flex-1 min-w-[120px]"
                    disabled={!amount}
                  >
                    Next
                  </Button>
                  <Button
                    onClick={handleCancel}
                    variant="outline"
                    className="flex-1 min-w-[120px]"
                  >
                    Cancel
                  </Button>
                </div>
              </div>
            ) : buyingStep === "allowance" ? (
              <div className="flex flex-col border-2 border-gray-200 rounded-lg p-4">
                <h3 className="text-lg font-bold mb-2">Approve Tokens</h3>
                <p className="mb-4 text-sm">
                  Approve unlimited {tokenSymbol} spending to buy shares without
                  future approvals.
                </p>
                <div className="flex justify-end gap-2">
                  <Button
                    onClick={handleSetApproval}
                    className="min-w-[120px]"
                    disabled={isApproving}
                  >
                    {isApproving ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Approving...
                      </>
                    ) : (
                      "Approve"
                    )}
                  </Button>
                  <Button
                    onClick={handleCancel}
                    variant="outline"
                    className="min-w-[120px]"
                    disabled={isApproving}
                  >
                    Cancel
                  </Button>
                </div>
              </div>
            ) : (
              <div className="flex flex-col border-2 border-gray-200 rounded-lg p-4">
                <h3 className="text-lg font-bold mb-2">Confirm Purchase</h3>
                <p className="mb-4 text-sm">
                  Buy{" "}
                  <span className="font-bold">
                    {amount}{" "}
                    {selectedOption === "A" ? market.optionA : market.optionB}
                  </span>{" "}
                  shares for {amount} {tokenSymbol}.
                </p>
                <div className="flex justify-end gap-2">
                  <Button
                    onClick={handleConfirm}
                    className="min-w-[120px]"
                    disabled={isConfirming}
                  >
                    {isConfirming ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Confirming...
                      </>
                    ) : (
                      "Confirm"
                    )}
                  </Button>
                  <Button
                    onClick={handleCancel}
                    variant="outline"
                    className="min-w-[120px]"
                    disabled={isConfirming}
                  >
                    Cancel
                  </Button>
                </div>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
}



================================================
FILE: src/components/market-card-skeleton.tsx
================================================
import { Badge } from "./ui/badge";
import { Card, CardContent, CardHeader, CardTitle } from "./ui/card";
import { Progress } from "./ui/progress";

export function MarketCardSkeleton() {
    return (
        <Card className="flex flex-col">
            <div className="animate-pulse">
                <CardHeader>
                    <Badge 
                        variant="secondary" 
                        className="mb-2 bg-gray-200 h-4 w-full"
                    />
                    <CardTitle className="bg-gray-200 h-6 w-1/3" />
                </CardHeader>
                <CardContent>
                    <div className="mb-4">
                        <div className="flex justify-between mb-2">
                            <span className="bg-gray-200 h-4 w-1/4" />
                            <span className="bg-gray-200 h-4 w-1/4" />
                        </div>
                        <Progress value={0} className="h-2 bg-gray-200" />
                    </div>
                </CardContent>
            </div>
        </Card>
    );
}



================================================
FILE: src/components/market-pending.tsx
================================================
export function MarketPending() {
    return (
        <div className="flex flex-col gap-2">
            <div className="mb-2 bg-yellow-200 p-2 rounded-md text-center text-xs">
                Pending resolution
            </div>
        </div>
    );
}



================================================
FILE: src/components/market-progress.tsx
================================================
import { Progress } from "@/components/ui/progress";

// Utility to format bigint amounts based on token decimals
function formatTokenAmount(amount: bigint, decimals: number = 18): string {
  const divisor = BigInt(10) ** BigInt(decimals);
  const integer = amount / divisor;
  const fractional = (amount % divisor)
    .toString()
    .padStart(decimals, "0")
    .slice(0, 4);
  return `${integer}.${fractional}`.replace(/\.?0+$/, ""); // Remove trailing zeros
}

interface MarketProgressProps {
  optionA: string;
  optionB: string;
  totalOptionAShares: bigint;
  totalOptionBShares: bigint;
  tokenDecimals?: number; // Optional, defaults to 18
}

export function MarketProgress({
  optionA,
  optionB,
  totalOptionAShares,
  totalOptionBShares,
  tokenDecimals = 18,
}: MarketProgressProps) {
  const totalShares = totalOptionAShares + totalOptionBShares;

  // Calculate percentages using bigint for precision
  const yesPercentage =
    totalShares > 0n
      ? Number((totalOptionAShares * 1000n) / totalShares) / 10 // One decimal place
      : 0;
  const noPercentage = totalShares > 0n ? 100 - yesPercentage : 0;

  // Calculate implied odds (total / winningShares)
  const yesOdds =
    totalShares > 0n && totalOptionAShares > 0n
      ? Number((totalShares * 100n) / totalOptionAShares) / 100
      : 0;
  const noOdds =
    totalShares > 0n && totalOptionBShares > 0n
      ? Number((totalShares * 100n) / totalOptionBShares) / 100
      : 0;

  // Format share amounts
  const yesShares = formatTokenAmount(totalOptionAShares, tokenDecimals);
  const noShares = formatTokenAmount(totalOptionBShares, tokenDecimals);

  return (
    <div className="mb-4">
      {totalShares === 0n ? (
        <div className="text-center text-gray-500 text-sm">No bets yet</div>
      ) : (
        <>
          <div className="flex justify-between mb-2">
            <span className="flex items-center gap-1">
              <span className="font-bold text-sm text-green-600">
                {optionA}: {yesShares}
              </span>
              <span className="text-xs text-gray-500">
                {yesPercentage.toFixed(1)}% ({yesOdds.toFixed(2)}x)
              </span>
            </span>
            <span className="flex items-center gap-1">
              <span className="font-bold text-sm text-red-600">
                {optionB}: {noShares}
              </span>
              <span className="text-xs text-gray-500">
                {noPercentage.toFixed(1)}% ({noOdds.toFixed(2)}x)
              </span>
            </span>
          </div>
          <Progress
            value={yesPercentage}
            className="h-2 bg-red-100"
            style={{
              background: `linear-gradient(to right, #16a34a ${yesPercentage}%, #dc2626 ${yesPercentage}%)`,
            }}
          />
        </>
      )}
    </div>
  );
}



================================================
FILE: src/components/market-resolved.tsx
================================================
import { useActiveAccount, useReadContract } from "thirdweb/react";
import { contract } from "@/constants/contract";

interface MarketResolvedProps {
  marketId: number;
  outcome: number;
  optionA: string;
  optionB: string;
}

export function MarketResolved({
  marketId,
  outcome,
  optionA,
  optionB,
}: MarketResolvedProps) {
  const account = useActiveAccount();

  // Only fetch claimed status if account is connected
  const { data: claimedStatus, isLoading } = useReadContract({
    contract,
    method:
      "function getUserClaimedStatus(uint256 _marketId, address _user) view returns (bool)",
    params: [BigInt(marketId), account?.address || "0x0"],
    queryOptions: { enabled: !!account }, // Disabled query if no account
  });

  // Determine distribution message
  const distributionMessage = !account
    ? "Connect wallet to view reward status"
    : isLoading
    ? "Checking reward status..."
    : claimedStatus
    ? "Rewards distributed"
    : "Verifying results";

  return (
    <div className="flex flex-col gap-2">
      <div className="bg-green-200 p-2 rounded-md text-center text-xs">
        Resolved: {outcome === 1 ? optionA : optionB}
      </div>
      <p className="text-xs text-gray-500 text-center">{distributionMessage}</p>
    </div>
  );
}



================================================
FILE: src/components/market-shares-display.tsx
================================================
import { Badge } from "./ui/badge";
import { toEther } from "thirdweb";
import { useEffect, useState } from "react";
import { toFixed } from "@/lib/utils";

interface MarketSharesDisplayProps {
    market: {
        optionA: string;
        optionB: string;
        totalOptionAShares: bigint;
        totalOptionBShares: bigint;
    };
    sharesBalance: {
        optionAShares: bigint;
        optionBShares: bigint;
    };
}

export function MarketSharesDisplay({
    market,
    sharesBalance,
}: MarketSharesDisplayProps) {
    const [winnings, setWinnings] = useState<{ A: bigint; B: bigint }>({ 
        A: BigInt(0), 
        B: BigInt(0) 
    });

    const calculateWinnings = (option: 'A' | 'B') => {
        if (!sharesBalance || !market) return BigInt(0);

        const userShares = option === 'A' ? sharesBalance.optionAShares : sharesBalance.optionBShares;
        const totalSharesForOption = option === 'A' ? market.totalOptionAShares : market.totalOptionBShares;
        const totalLosingShares = option === 'A' ? market.totalOptionBShares : market.totalOptionAShares;

        if (totalSharesForOption === BigInt(0)) return BigInt(0);

        // Calculate user's proportion of the winning side
        const userProportion = (userShares * BigInt(1000000)) / totalSharesForOption; // Multiply by 1M for precision
        
        // Calculate their share of the losing side's shares
        const winningsFromLosingShares = (totalLosingShares * userProportion) / BigInt(1000000);
        
        // Total winnings is their original shares plus their proportion of losing shares
        return userShares + winningsFromLosingShares;
    };

    useEffect(() => {
        if (!sharesBalance || !market) return;

        const newWinnings = {
            A: calculateWinnings('A'),
            B: calculateWinnings('B')
        };

        // Only update if values actually changed
        if (newWinnings.A !== winnings.A || newWinnings.B !== winnings.B) {
            setWinnings(newWinnings);
        }
    }, [sharesBalance, market.totalOptionAShares, market.totalOptionBShares]);

    const displayWinningsA = toFixed(Number(toEther(winnings.A)), 2);
    const displayWinningsB = toFixed(Number(toEther(winnings.B)), 2);

    return (
        <div className="flex flex-col gap-2">
            <div className="w-full text-sm text-muted-foreground">
                Your shares: {market.optionA} - {Math.floor(parseInt(toEther(sharesBalance?.optionAShares)))}, {market.optionB} - {Math.floor(parseInt(toEther(sharesBalance?.optionBShares)))}
            </div>
            {(winnings.A > 0 || winnings.B > 0) && (
                <div className="flex flex-col gap-1">
                    <div className="text-xs text-muted-foreground">Winnings:</div>
                    <div className="flex gap-2">
                        <Badge variant="secondary">{market.optionA}: {displayWinningsA} shares</Badge>
                        <Badge variant="secondary">{market.optionB}: {displayWinningsB} shares</Badge>
                    </div>
                </div>
            )}
        </div>
    );
}



================================================
FILE: src/components/market-time.tsx
================================================
import { cn } from "@/lib/utils";
import { useEffect, useState } from "react";

interface MarketTimeProps {
  endTime: bigint;
  className?: string;
}

const calculateTimeLeft = (endTime: bigint) => {
  const difference = Number(endTime) * 1000 - Date.now();

  if (difference <= 0) {
    return { days: 0, hours: 0, minutes: 0, seconds: 0 };
  }

  return {
    days: Math.floor(difference / (1000 * 60 * 60 * 24)),
    hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
    minutes: Math.floor((difference / 1000 / 60) % 60),
    seconds: Math.floor((difference / 1000) % 60),
  };
};

export default function MarketTime({ endTime, className }: MarketTimeProps) {
  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft(endTime));
  const isEnded = new Date(Number(endTime) * 1000) < new Date();

  useEffect(() => {
    if (isEnded) return;

    const timer = setInterval(() => {
      setTimeLeft(calculateTimeLeft(endTime));
    }, 1000);

    return () => clearInterval(timer);
  }, [endTime, isEnded]);

  if (isEnded) {
    return (
      <div
        className={cn(
          "text-xs px-2 py-1 rounded-md bg-gradient-to-r from-red-100 to-red-200 text-red-800 border border-red-300 flex items-center shadow-sm w-fit",
          className
        )}
      >
        <span className="h-1.5 w-1.5 bg-red-500 animate-pulse rounded-full mr-1.5"></span>
        <span className="font-medium">Ended</span>
      </div>
    );
  }

  return (
    <div
      className={cn(
        "text-xs px-2 py-1 rounded-md bg-gradient-to-r from-green-50 to-green-100 border border-green-200 flex items-center shadow-sm w-fit",
        className
      )}
    >
      <span className="text-green-500 font-medium mr-1.5">⏱</span>
      <span className="text-green-600 font-medium mr-1.5">Ends:</span>
      {timeLeft.days > 0 && <TimeUnit value={timeLeft.days} unit="d" />}
      <TimeUnit value={timeLeft.hours} unit="h" />
      <TimeUnit value={timeLeft.minutes} unit="m" />
      <TimeUnit value={timeLeft.seconds} unit="s" isLast={true} />
    </div>
  );
}

const TimeUnit = ({
  value,
  unit,
  isLast = false,
}: {
  value: number;
  unit: string;
  isLast?: boolean;
}) => (
  <span className={cn("flex items-center", !isLast && "mr-1")}>
    <span className="font-bold text-grey-800">
      {String(value).padStart(2, "0")}
    </span>
    <span className="text-grey-500">{unit}</span>
  </span>
);



================================================
FILE: src/components/marketCard.tsx
================================================
"use client";

import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "./ui/card";
import { Button } from "./ui/button";
import { useActiveAccount, useReadContract } from "thirdweb/react";
import { contract } from "@/constants/contract";
import { MarketProgress } from "./market-progress";
import MarketTime from "./market-time";
// import { MarketCardSkeleton } from "./market-card-skeleton";
import { MarketResolved } from "./market-resolved";
import { MarketPending } from "./market-pending";
import { MarketBuyInterface } from "./market-buy-interface";
import { MarketSharesDisplay } from "./market-shares-display";

// Interface for market data
export interface Market {
  // index?: number; // Optional: if you need the original index inside the card
  question: string;
  optionA: string;
  optionB: string;
  endTime: bigint;
  outcome: number; // Solidity enum maps to number
  totalOptionAShares: bigint;
  totalOptionBShares: bigint;
  resolved: boolean;
}

// Interface for shares balance
interface SharesBalance {
  optionAShares: bigint;
  optionBShares: bigint;
}

// Props for the MarketCard component
interface MarketCardProps {
  index: number; // Keep index for contract calls like getShareBalance
  market: Market; // Receive the processed market data directly
}

export function MarketCard({ index, market }: MarketCardProps) {
  const account = useActiveAccount();

  // --- Use the market data passed via props ---
  const marketData = market;
  // --- END ---

  // Fetch shares balance (keep as is, uses index)
  const { data: sharesBalanceData } = useReadContract({
    contract,
    method:
      "function getShareBalance(uint256 _marketId, address _user) view returns (uint256 optionAShares, uint256 optionBShares)",
    params: [BigInt(index), account?.address as string],
    queryOptions: { enabled: !!account?.address && !!marketData }, // Also check marketData exists
  });

  const sharesBalance: SharesBalance | undefined = sharesBalanceData
    ? {
        optionAShares: sharesBalanceData[0],
        optionBShares: sharesBalanceData[1],
      }
    : undefined;

  // Calculate status based on the marketData prop
  // These are now used for *internal* display logic within the card
  const isExpired = new Date(Number(marketData.endTime) * 1000) < new Date();
  const isResolved = marketData.resolved;

  // Construct Warpcast share URL
  const appUrl =
    process.env.NEXT_PUBLIC_APP_URL || "https://buster-mkt.vercel.app";
  const marketPageUrl = `${appUrl}/market/${index}`;
  const warpcastShareUrl = `https://warpcast.com/~/compose?text=${encodeURIComponent(
    `Check out this market on Buster Market: ${
      marketData?.question || `Market ${index}`
    }`
  )}&embeds[]=${encodeURIComponent(marketPageUrl)}`;

  return (
    <Card key={index} className="flex flex-col">
      <CardHeader>
        <MarketTime endTime={marketData.endTime} />
        <CardTitle>{marketData.question}</CardTitle>
      </CardHeader>
      <CardContent className="pb-0">
        <MarketProgress
          optionA={marketData.optionA}
          optionB={marketData.optionB}
          totalOptionAShares={marketData.totalOptionAShares}
          totalOptionBShares={marketData.totalOptionBShares}
        />
        {isExpired ? (
          isResolved ? (
            <MarketResolved
              marketId={index}
              outcome={marketData.outcome}
              optionA={marketData.optionA}
              optionB={marketData.optionB}
            />
          ) : (
            <MarketPending />
          )
        ) : (
          <MarketBuyInterface marketId={index} market={marketData} />
        )}
      </CardContent>
      <CardFooter className="flex justify-between items-center pt-4">
        {sharesBalance &&
        (sharesBalance.optionAShares > 0n ||
          sharesBalance.optionBShares > 0n) ? (
          <MarketSharesDisplay
            market={marketData}
            sharesBalance={sharesBalance}
          />
        ) : (
          <div />
        )}
        <Button asChild variant="outline" size="sm">
          <a href={warpcastShareUrl} target="_blank" rel="noopener noreferrer">
            Share
          </a>
        </Button>
      </CardFooter>
    </Card>
  );
}



================================================
FILE: src/components/MarketList.tsx
================================================
"use client"; // Add "use client" if not already present at the top

import { useReadContract } from "thirdweb/react";
import { contract } from "@/constants/contract";
import { MarketCard, Market } from "./marketCard"; // Import Market interface
import { MarketCardSkeleton } from "./market-card-skeleton"; // Import Skeleton
import { useMemo } from "react";

// Interface MarketListProps (keep as is)
interface MarketListProps {
  filter: "active" | "pending" | "resolved";
}

// --- Helper function to determine market status ---
function getMarketStatus(market: Market): "active" | "pending" | "resolved" {
  const now = Math.floor(Date.now() / 1000);
  const isExpired = Number(market.endTime) < now;
  const isResolved = market.resolved;

  if (isResolved) {
    return "resolved";
  } else if (isExpired) {
    return "pending";
  } else {
    return "active";
  }
}
// --- End Helper ---

export function MarketList({ filter }: MarketListProps) {
  // --- REMOVED: cachedMarkets state is no longer needed ---
  // const [cachedMarkets, setCachedMarkets] = useState<Map<number, Market>>(new Map());

  // Fetch market count (keep as is)
  const { data: marketCount } = useReadContract({
    contract,
    method: "function getMarketCount() view returns (uint256)",
    params: [],
  });

  // Generate array of market IDs (keep as is)
  const marketIds = useMemo(() => {
    if (marketCount === undefined || marketCount === null) return []; // Handle undefined/null
    return Array.from({ length: Number(marketCount) }, (_, i) => BigInt(i));
  }, [marketCount]);

  // Fetch market data in batch (keep as is)
  const { data: marketsData, isLoading } = useReadContract({
    contract,
    method:
      "function getMarketInfoBatch(uint256[] _marketIds) view returns (string[] questions, string[] optionAs, string[] optionBs, uint256[] endTimes, uint8[] outcomes, uint256[] totalOptionASharesArray, uint256[] totalOptionBSharesArray, bool[] resolvedArray)",
    params: [marketIds],
    // Only run query if marketIds has elements
    queryOptions: { enabled: marketIds.length > 0 },
  });

  // --- REVISED: Parse market data and include original index ---
  const allParsedMarkets = useMemo(() => {
    if (!marketsData || marketIds.length === 0) return [];

    // Deconstruct for clarity
    const [
      questions,
      optionAs,
      optionBs,
      endTimes,
      outcomes,
      totalOptionASharesArray,
      totalOptionBSharesArray,
      resolvedArray,
    ] = marketsData;

    // Map raw data to Market objects, including the original index (marketId)
    const parsedMarkets: (Market & { originalIndex: number })[] = [];
    for (let i = 0; i < marketIds.length; i++) {
      // Basic check if data exists for this index
      if (questions[i] !== undefined) {
        parsedMarkets.push({
          originalIndex: Number(marketIds[i]), // Store the original market ID
          question: questions[i],
          optionA: optionAs[i],
          optionB: optionBs[i],
          endTime: endTimes[i],
          outcome: outcomes[i],
          totalOptionAShares: totalOptionASharesArray[i],
          totalOptionBShares: totalOptionBSharesArray[i],
          resolved: resolvedArray[i],
        });
      }
    }
    return parsedMarkets;
  }, [marketsData, marketIds]);
  // --- END REVISED ---

  // --- NEW: Filter markets based on the filter prop ---
  const filteredMarkets = useMemo(() => {
    return allParsedMarkets.filter(
      (market) => getMarketStatus(market) === filter
    );
  }, [allParsedMarkets, filter]);
  // --- END NEW ---

  // --- REVISED: Render Skeletons or Filtered Markets ---
  return (
    <div className="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
      {" "}
      {/* Added grid layout like dashboard */}
      {isLoading ? (
        // Render skeletons directly
        Array.from({ length: 3 }).map((_, i) => (
          <MarketCardSkeleton key={`skeleton-${i}`} />
        ))
      ) : filteredMarkets.length > 0 ? (
        // Render filtered markets, passing only index and market
        filteredMarkets.map((market) => (
          <MarketCard
            key={market.originalIndex} // Use original index as key
            index={market.originalIndex} // Pass original index
            market={market} // Pass the market data object
            // filter, isLoading, cachedMarkets props are removed
          />
        ))
      ) : (
        // Optional: Add an empty state message if no markets match the filter
        <div className="col-span-full text-center text-gray-500 py-10">
          {" "}
          {/* Span across grid columns */}
          No {filter} markets found.
        </div>
      )}
    </div>
  );
  // --- END REVISED ---
}



================================================
FILE: src/components/MiniAppClient.tsx
================================================
"use client";

import { useEffect } from "react";
import { sdk } from "@farcaster/frame-sdk";

export function MiniAppClient() {
  useEffect(() => {
    // Hide splash screen when app is ready
    sdk.actions.ready({ disableNativeGestures: false });
  }, []);

  return null;
}



================================================
FILE: src/components/navbar.tsx
================================================
import React, { useState } from "react";
import { ConnectButton, lightTheme } from "thirdweb/react";
import { client } from "@/app/client";
import { base } from "wagmi/chains";
import { createWallet } from "thirdweb/wallets";
import { ClaimTokensButton } from "./ClaimTokensButton";
import { WagmiConfig, createConfig, http } from "wagmi";
import { farcasterFrame } from "@farcaster/frame-wagmi-connector";
import { Info } from "lucide-react";

const wagmiConfig = createConfig({
  chains: [base],
  transports: { [base.id]: http() },
  connectors: [farcasterFrame()],
});

const wallets = [
  createWallet("io.metamask"),
  createWallet("com.coinbase.wallet"),
  createWallet("me.rainbow"),
  createWallet("io.rabby"),
  createWallet("io.zerion.wallet"),
];

const customBase = {
  id: base.id,
  name: base.name,
  nativeCurrency: base.nativeCurrency,
  rpc: "https://base-mainnet.g.alchemy.com/v2/jprc9bb4eoqJdv5K71YUZdhKyf20gILa",
  blockExplorers: [
    {
      name: "Basescan",
      url: "https://basescan.org",
      apiUrl: "https://api-basescan.org/api",
    },
  ],
  network: "base",
};

export function Navbar() {
  const [showInfo, setShowInfo] = useState(false);

  return (
    <WagmiConfig config={wagmiConfig}>
      {/* Desktop View */}
      <div className="hidden md:flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold">Forecast</h1>
        <div className="flex items-center gap-3">
          <ClaimTokensButton />
          <ConnectButton
            client={client}
            theme={lightTheme()}
            chain={customBase}
            wallets={wallets}
            autoConnect={true}
            connectModal={{ size: "compact" }}
            connectButton={{
              style: { fontSize: "0.75rem", height: "2.5rem" },
              label: "Sign In",
            }}
            detailsButton={{
              displayBalanceToken: {
                [base.id]: "0x55b04F15A1878fa5091D5E35ebceBC06A5EC2F31",
              },
            }}
          />
        </div>
      </div>

      {/* Mobile View */}
      <div className="md:hidden flex justify-between items-center mb-6">
        <ConnectButton
          client={client}
          theme={lightTheme()}
          chain={customBase}
          wallets={wallets}
          autoConnect={true}
          connectModal={{ size: "compact" }}
          connectButton={{
            style: { fontSize: "0.65rem", height: "2rem", padding: "0 0.5rem" },
            label: "Sign In",
          }}
          detailsButton={{
            displayBalanceToken: {
              [base.id]: "0x55b04F15A1878fa5091D5E35ebceBC06A5EC2F31",
            },
            style: {
              fontSize: "0.6rem",
              height: "2rem",
            } /* padding: "0 0.5rem"*/,
          }}
        />
        <button
          onClick={() => setShowInfo(!showInfo)}
          className="p-2 bg-rose-300 hover:bg-rose-500 text-white rounded-lg transition-colors"
        >
          <Info size={18} />
        </button>
      </div>

      {/* Info Panel */}
      {showInfo && (
        <div className="md:hidden bg-white shadow-lg rounded-lg p-4 mb-6">
          <div className="flex flex-col gap-3">
            <div className="bg-gray-50 p-3 rounded-lg text-sm">
              <h3 className="font-bold mb-1">Welcome to Forecast!</h3>
              <p className="mb-2">
                Forecast is a prediction game where users can predict outcomes
                of various events.
              </p>
              <p className="mb-2">To start playing:</p>
              <ol className="list-decimal pl-5 mb-2">
                <li>Sign in with your wallet</li>
                <li>Claim 5,000 BSTR shares</li>
                <li>Browse available predictions</li>
                <li>Place your bets!</li>
              </ol>
              <p className="text-rose-300 font-semibold">
                Claim your tokens now to begin!
              </p>
            </div>
            <ClaimTokensButton />
          </div>
        </div>
      )}
    </WagmiConfig>
  );
}



================================================
FILE: src/components/OnboardingModal.tsx
================================================
"use client";

import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { ClaimTokensButton } from "@/components/ClaimTokensButton";
import { sdk } from "@farcaster/frame-sdk";
import { useEffect, useState } from "react";

export function OnboardingModal() {
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    if (!localStorage.getItem("hasSeenOnboarding")) {
      setIsOpen(true);
      sdk.actions.ready().catch((err) => console.error("Splash error:", err));
    }
  }, []);

  const handleClose = () => {
    setIsOpen(false);
    localStorage.setItem("hasSeenOnboarding", "true");
  };

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Forecast</DialogTitle>
        </DialogHeader>
        <p className="py-4 text-sm text-muted-foreground">
          Bet BSTR tokens on outcomes like “Will it rain this afternoon?” on
          Base. Claim tokens to start!
        </p>
        <div className="flex gap-2">
          <ClaimTokensButton />
          <Button variant="outline" onClick={handleClose} className="w-full">
            Close
          </Button>
        </div>
      </DialogContent>
    </Dialog>
  );
}



================================================
FILE: src/components/upgrades.md
================================================
4. Improve button UX for grayed-out states (`src/components/market-buy-interface.tsx`).
5.
6. Optimize loading time (`src/components/enhanced-prediction-market-dashboard.tsx`).



================================================
FILE: src/components/VoteHistory.tsx
================================================
"use client";

import { useState, useEffect, useCallback } from "react";
import { useActiveAccount } from "thirdweb/react";
import { prepareEvent, readContract, getContractEvents } from "thirdweb";
import { eth_blockNumber } from "thirdweb/rpc";
import { getRpcClient } from "thirdweb/rpc";
import { contract } from "@/constants/contract";
import { base } from "thirdweb/chains";
import { debounce } from "lodash";
import { useToast } from "@/components/ui/use-toast";
import Link from "next/link";
import { Input } from "@/components/ui/input";
import { ArrowUpDown } from "lucide-react";

// Cache keys for local storage
const CACHE_KEY = "vote_history_cache";
const LAST_BLOCK_KEY = "last_fetched_block";

interface SharesPurchasedEvent {
  args: {
    marketId: bigint;
    buyer: string;
    isOptionA: boolean;
    amount: bigint;
  };
  blockNumber: bigint;
}

interface Vote {
  marketId: number;
  option: string;
  amount: bigint;
  marketName: string;
}

interface MarketInfo {
  marketId: number;
  question: string;
  optionA: string;
  optionB: string;
}

interface CacheData {
  votes: Vote[];
  marketInfo: Record<number, MarketInfo>;
  [LAST_BLOCK_KEY]: string;
}

const preparedEvent = prepareEvent({
  signature:
    "event SharesPurchased(uint256 indexed marketId, address indexed buyer, bool isOptionA, uint256 amount)",
});

type SortKey = "marketId" | "marketName" | "option" | "amount";
type SortDirection = "asc" | "desc";

export function VoteHistory() {
  const account = useActiveAccount();
  const { toast } = useToast();
  const [votes, setVotes] = useState<Vote[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [tokenSymbol, setTokenSymbol] = useState<string>("BSTR");
  const [tokenDecimals, setTokenDecimals] = useState<number>(18);
  const [search, setSearch] = useState<string>("");
  const [sortKey, setSortKey] = useState<SortKey>("marketId");
  const [sortDirection, setSortDirection] = useState<SortDirection>("desc");

  // Fetch token metadata
  useEffect(() => {
    const fetchTokenMetadata = async () => {
      try {
        const bettingTokenAddress = await readContract({
          contract,
          method: "function bettingToken() view returns (address)",
          params: [],
        });
        const tokenContract = {
          ...contract,
          address: bettingTokenAddress,
        };
        const [symbol, decimals] = await Promise.all([
          readContract({
            contract: tokenContract,
            method: "function symbol() view returns (string)",
            params: [],
          }),
          readContract({
            contract: tokenContract,
            method: "function decimals() view returns (uint8)",
            params: [],
          }),
        ]);
        setTokenSymbol(symbol);
        setTokenDecimals(decimals);
      } catch (err) {
        console.error("Failed to fetch token metadata:", err);
      }
    };
    fetchTokenMetadata();
  }, []);

  // Load cache from local storage
  const loadCache = useCallback((): CacheData => {
    try {
      const cached = localStorage.getItem(CACHE_KEY);
      return cached
        ? JSON.parse(cached)
        : { votes: [], marketInfo: {}, [LAST_BLOCK_KEY]: "0" };
    } catch {
      return { votes: [], marketInfo: {}, [LAST_BLOCK_KEY]: "0" };
    }
  }, []);

  // Save cache to local storage
  const saveCache = useCallback((data: CacheData) => {
    try {
      localStorage.setItem(CACHE_KEY, JSON.stringify(data));
    } catch (error) {
      console.error("Cache save error:", error);
    }
  }, []);

  // Fetch votes
  const fetchVotes = useCallback(
    (accountAddress: string) => {
      const debouncedFetch = debounce(async () => {
        if (!accountAddress) {
          setVotes([]);
          setIsLoading(false);
          return;
        }

        setIsLoading(true);
        try {
          // Load cache
          const cache = loadCache();
          let newVotes = [...cache.votes];
          const marketInfoCache = { ...cache.marketInfo };
          let fromBlock = BigInt(cache[LAST_BLOCK_KEY] || "28965072"); // Deployment block

          // Fetch latest block number
          const rpcClient = getRpcClient({
            client: contract.client,
            chain: base,
          });
          const latestBlock = await eth_blockNumber(rpcClient);

          // Fetch events incrementally
          const blockRange = BigInt(1000);
          const allEvents: SharesPurchasedEvent[] = [];
          while (fromBlock <= latestBlock) {
            const toBlock =
              fromBlock + blockRange > latestBlock
                ? latestBlock
                : fromBlock + blockRange;
            const events = await getContractEvents({
              contract,
              fromBlock,
              toBlock,
              events: [preparedEvent],
            });
            allEvents.push(...(events as SharesPurchasedEvent[]));
            fromBlock = toBlock + BigInt(1);
          }

          // Filter user events
          const userEvents = allEvents.filter(
            (e) => e.args.buyer.toLowerCase() === accountAddress.toLowerCase()
          );

          // Get unique market IDs
          const marketIds = [
            ...new Set(userEvents.map((e) => Number(e.args.marketId))),
          ];
          const uncachedMarketIds = marketIds.filter(
            (id) => !marketInfoCache[id]
          );

          // Fetch market info in batch
          if (uncachedMarketIds.length > 0) {
            const marketInfos = await readContract({
              contract,
              method:
                "function getMarketInfoBatch(uint256[] _marketIds) view returns (string[] questions, string[] optionAs, string[] optionBs, uint256[] endTimes, uint8[] outcomes, uint256[] totalOptionASharesArray, uint256[] totalOptionBSharesArray, bool[] resolvedArray)",
              params: [uncachedMarketIds.map(BigInt)],
            });

            // Update market info cache
            uncachedMarketIds.forEach((marketId, i) => {
              marketInfoCache[marketId] = {
                marketId,
                question: marketInfos[0][i],
                optionA: marketInfos[1][i],
                optionB: marketInfos[2][i],
              };
            });
          }

          // Map events to votes
          const newUserVotes = userEvents
            .map((e) => {
              const market = marketInfoCache[Number(e.args.marketId)];
              if (!market) return null;
              return {
                marketId: Number(e.args.marketId),
                option: e.args.isOptionA ? market.optionA : market.optionB,
                amount: e.args.amount,
                marketName: market.question,
              };
            })
            .filter((vote): vote is Vote => vote !== null);

          // Merge new votes with cached votes, avoiding duplicates
          const voteMap = new Map<number, Vote>();
          [...cache.votes, ...newUserVotes].forEach((vote, i) => {
            voteMap.set(i, vote);
          });
          newVotes = Array.from(voteMap.values());

          // Update cache
          saveCache({
            votes: newVotes,
            marketInfo: marketInfoCache,
            [LAST_BLOCK_KEY]: latestBlock.toString(),
          });

          setVotes(newVotes);
        } catch (error) {
          console.error("Vote history error:", error);
          toast({
            title: "Error",
            description: "Failed to load vote history. Please try again.",
            variant: "destructive",
          });
          setVotes([]);
        } finally {
          setIsLoading(false);
        }
      }, 500);

      debouncedFetch();
      return debouncedFetch.cancel;
    },
    [loadCache, saveCache, toast]
  );

  useEffect(() => {
    const cancel = fetchVotes(account?.address || "");
    return () => cancel();
  }, [account, fetchVotes]);

  // Handle sorting
  const handleSort = (key: SortKey) => {
    if (key === sortKey) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc");
    } else {
      setSortKey(key);
      setSortDirection("asc");
    }
  };

  // Map SortDirection to aria-sort values
  const getAriaSort = (key: SortKey): "none" | "ascending" | "descending" => {
    if (key !== sortKey) return "none";
    return sortDirection === "asc" ? "ascending" : "descending";
  };

  // Sort and filter votes
  const filteredVotes = votes
    .filter(
      (vote) =>
        vote.marketName.toLowerCase().includes(search.toLowerCase()) ||
        vote.option.toLowerCase().includes(search.toLowerCase())
    )
    .sort((a, b) => {
      const multiplier = sortDirection === "asc" ? 1 : -1;
      switch (sortKey) {
        case "marketId":
          return (a.marketId - b.marketId) * multiplier;
        case "marketName":
          return a.marketName.localeCompare(b.marketName) * multiplier;
        case "option":
          return a.option.localeCompare(b.option) * multiplier;
        case "amount":
          return Number(a.amount - b.amount) * multiplier;
        default:
          return 0;
      }
    });

  if (!account) {
    return (
      <div className="flex flex-col items-center justify-center p-6 bg-gray-50 rounded-lg shadow-sm border border-gray-200">
        <div className="text-gray-500 font-medium">
          Your market history will appear here
        </div>
      </div>
    );
  }

  if (isLoading) {
    return (
      <div className="border border-gray-200 rounded-lg overflow-hidden shadow-sm">
        <div className="bg-gray-50 p-3 border-b border-gray-200">
          <div className="h-6 bg-gray-200 rounded w-1/3 animate-pulse"></div>
        </div>
        <div className="divide-y divide-gray-200">
          {[1, 2, 3].map((i) => (
            <div key={i} className="p-4 animate-pulse">
              <div className="flex justify-between">
                <div className="h-5 bg-gray-200 rounded w-2/3"></div>
                <div className="h-5 bg-gray-200 rounded w-1/5"></div>
              </div>
              <div className="mt-2 h-4 bg-gray-100 rounded w-1/2"></div>
            </div>
          ))}
        </div>
      </div>
    );
  }

  return (
    <div className="bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200">
      <div className="bg-gray-50 px-4 py-3 border-b border-gray-200">
        <h3 className="text-sm font-medium text-gray-700">Your Vote History</h3>
        <Input
          placeholder="Search by market or option"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
          className="mt-2"
          aria-label="Search vote history"
        />
      </div>

      {filteredVotes.length > 0 ? (
        <div className="divide-y divide-gray-200">
          <div className="grid grid-cols-4 gap-4 px-4 py-2 bg-gray-100 text-xs font-medium text-gray-700">
            <button
              onClick={() => handleSort("marketId")}
              className="flex items-center gap-1 hover:text-gray-900"
              aria-sort={getAriaSort("marketId")}
              aria-label="Sort by Market ID"
            >
              Market ID
              <ArrowUpDown className="h-4 w-4" />
            </button>
            <button
              onClick={() => handleSort("marketName")}
              className="flex items-center gap-1 hover:text-gray-900"
              aria-sort={getAriaSort("marketName")}
              aria-label="Sort by Market Name"
            >
              Market Name
              <ArrowUpDown className="h-4 w-4" />
            </button>
            <button
              onClick={() => handleSort("option")}
              className="flex items-center gap-1 hover:text-gray-900"
              aria-sort={getAriaSort("option")}
              aria-label="Sort by Option"
            >
              Option
              <ArrowUpDown className="h-4 w-4" />
            </button>
            <button
              onClick={() => handleSort("amount")}
              className="flex items-center gap-1 hover:text-gray-900 text-right"
              aria-sort={getAriaSort("amount")}
              aria-label="Sort by Amount"
            >
              Amount
              <ArrowUpDown className="h-4 w-4" />
            </button>
          </div>
          {filteredVotes.map((vote, idx) => (
            <div
              key={idx}
              className="grid grid-cols-4 gap-4 px-4 py-3 hover:bg-gray-50 transition-colors"
              role="button"
              tabIndex={0}
              aria-label={`Vote on ${vote.marketName} for ${vote.option}`}
            >
              <div className="text-sm text-gray-900">
                <Link
                  href={`/market/${vote.marketId}`}
                  className="hover:underline"
                >
                  #{vote.marketId}
                </Link>
              </div>
              <div
                className="text-sm text-gray-900 truncate"
                title={vote.marketName}
              >
                <Link
                  href={`/market/${vote.marketId}`}
                  className="hover:underline"
                >
                  {vote.marketName}
                </Link>
              </div>
              <div className="text-sm">
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  {vote.option}
                </span>
              </div>
              <div className="text-sm font-medium text-gray-900 text-right">
                {(
                  Number(vote.amount) / Math.pow(10, tokenDecimals)
                ).toLocaleString(undefined, {
                  maximumFractionDigits: 2,
                })}{" "}
                {tokenSymbol}
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="flex flex-col items-center justify-center p-6 text-center">
          <svg
            className="w-12 h-12 text-gray-400"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            aria-hidden="true"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
            />
          </svg>
          <p className="mt-2 text-sm font-medium text-gray-500">
            {search ? "No matching votes found" : "No votes submitted yet"}
          </p>
          <p className="mt-1 text-xs text-gray-400">
            Your voting history will appear here
          </p>
        </div>
      )}
    </div>
  );
}



================================================
FILE: src/components/ui/badge.tsx
================================================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }



================================================
FILE: src/components/ui/button.tsx
================================================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }



================================================
FILE: src/components/ui/card.tsx
================================================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-base leading-8 font-semibold tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }



================================================
FILE: src/components/ui/dialog.tsx
================================================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}



================================================
FILE: src/components/ui/input.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

// export interface InputProps
//   extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<
  HTMLInputElement,
  React.InputHTMLAttributes<HTMLInputElement>
>(({ className, type, ...props }, ref) => {
  return (
    <input
      type={type}
      className={cn(
        "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      ref={ref}
      {...props}
    />
  );
});
Input.displayName = "Input";

export { Input };



================================================
FILE: src/components/ui/label.tsx
================================================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }



================================================
FILE: src/components/ui/progress.tsx
================================================
"use client"

import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }



================================================
FILE: src/components/ui/sonner.tsx
================================================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }



================================================
FILE: src/components/ui/tabs.tsx
================================================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }



================================================
FILE: src/components/ui/toast.tsx
================================================
"use client"

import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}



================================================
FILE: src/components/ui/toaster.tsx
================================================
"use client"

import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"
import { useToast } from "@/components/ui/use-toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}



================================================
FILE: src/components/ui/use-toast.ts
================================================
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

export const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_VALUE;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };



================================================
FILE: src/constants/contract.ts
================================================
import { client } from "@/app/client";
import { getContract } from "thirdweb";
import { base } from "thirdweb/chains";

export const contractAddress = "0xc703856dc56576800F9bc7DfD6ac15e92Ac2d7D6";
export const tokenAddress = "0x55b04F15A1878fa5091D5E35ebceBC06A5EC2F31";

export const contract = getContract({
  client: client,
  chain: base,
  address: contractAddress,
});

export const tokenContract = getContract({
  client: client,
  chain: base,
  address: tokenAddress,
});



================================================
FILE: src/constants/token.ts
================================================
export const tokenABI = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [],
    name: "EnforcedPause",
    type: "error",
  },
  {
    inputs: [],
    name: "ExpectedPause",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [],
    name: "CLAIM_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MAX_CLAIMS",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "hasClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalClaims",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export const tokenAddress = "0x55b04F15A1878fa5091D5E35ebceBC06A5EC2F31";



================================================
FILE: src/hooks/use-toast.ts
================================================
"use client";

// Inspired by react-hot-toast library
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case actionTypes.ADD_TOAST:
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case actionTypes.UPDATE_TOAST:
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      };

    case actionTypes.DISMISS_TOAST: {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      };
    }
    case actionTypes.REMOVE_TOAST:
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };



================================================
FILE: src/hooks/useFarcasterUser.ts
================================================
import { sdk } from "@farcaster/frame-sdk";
import { useEffect, useState } from "react";

export function useFarcasterUser() {
  const [user, setUser] = useState<{
    fid: number;
    username?: string;
    pfpUrl?: string;
  } | null>(null);

  useEffect(() => {
    const fetchUser = async () => {
      const context = await sdk.context;
      if (context.user) setUser(context.user);
    };
    fetchUser();
  }, []);

  return user;
}



================================================
FILE: src/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { twMerge } from "tailwind-merge";

// Combine classes with tailwind-merge
export function cn(...inputs: ClassValue[]) {
    return twMerge(clsx(inputs));
}

// Format number to fixed decimals
export function toFixed(value: number, decimals: number) {
    return value.toFixed(decimals);
}

// Format date to readable string
export function formatDate(dateString: string) {
    return new Date(dateString).toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'short',
        day: 'numeric'
    });
}

// Add any other utility functions here...



================================================
FILE: src/types/types.ts
================================================
export interface Market {
    question: string;
    optionA: string;
    optionB: string;
    endTime: string;
    outcome: string;
    totalOptionAShares: number;
    totalOptionBShares: number;
    resolved: boolean;
}

